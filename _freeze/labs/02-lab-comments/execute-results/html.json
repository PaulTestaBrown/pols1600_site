{
  "hash": "7396f4ad8579c88988d4b7817d2be080",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Lab 02 - Visualizing data on COVID-19 in the U.S.'\nauthor: \"Your Name HERE\"\ndate: \"Last Updated 2024-02-07\"\nformat:\n  html:\n    toc: true\n    toc-location: right\n    toc-float: true\n    toc-depth: 2\n    number-sections: true\nexecute:\n  error: true\n  echo: true\n  warning: false\n---\n\n# Overview {.unnumbered}\n\nOur goal for today is to first, reproduce this figure:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://pols1600.paultesta.org/labs/images/02_fig.png)\n:::\n:::\n\n\nAnd then adapt and improve this figure (or other figures) to explore questions we have about the data\n\nI don't expect anyone to be able to recite from memory the exact code, functions, and syntax to accomplish this task.\n\nThat said, you've already seen the code you need.\n\nIt's available to you in multiple places like the [slides](https://pols1600.paultesta.org/slides/01-slides#/commented-code) and the comments to last week's [labs](https://pols1600.paultesta.org/labs/01-lab-comments.html)\n\nMy hope is that this lab will help you do the following:\n\n-   **Chunk big tasks into smaller concrete steps**\n    - *How do I produce a figure that shows the average rate of new cases pe month for states with a particular type of face mask policy?* \n      - Well first, I'll need to load some packages to work with and visualize data. \n      - Then, I'll need to get the data. And then...\n-   **Think and write programmatically**\n    -   In this .qmd file, I'll first ask you to outline, conceptually, all the steps you'll need to do to produce this figure.\n    -   Don't worry if you can't think of all the necessary steps or aren't sure of the order. We'll be working through this collectively\n    -   When we do code, I'll ask you to organize your code as outlined below:\n        -   Separate your steps into sections using the `#` headers in Markdown\n        -   Write a brief overview in words that a normal human can understand, what the code in that section is doing\n        -   Paste the code for that section into a code chunk\n        -   Add brief comments to this code to help your reader understand what's happening\n        -   Knit your document after completing each section.\n-   **Mapping concepts to code**\n    -   You shouldn't have to write much new code. Just copy and paste from the labs and slides.\n    -   Your goal for today is to interpret that code and develop a mental map that allows you to say when I want to do this type of task (say \"recode data\"), I need to use some combination of these functions (`%>%`, `mutate()`, maybe `group_by()` or `case_when()`)\n-   **Practice wrangling data**\n    -   How do you load data?\n    -   How do you look at data?\n    -   How do you transform data?\n-   **Practice visualizing data**\n    -   Using the grammar of graphics to translate raw data into visual graphics\n    -   Understanding the components of this grammar:\n        -   data\n        -   aesthetics\n        -   geometries\n        -   facets\n        -   statistics\n        -   coordinates\n        -   themes\n    -   Exploring what happens when we change these components\n\nWe'll work in pairs and periodically check in as a class to check our progress, review concepts, and share insights.\n\n\nIf we finish early, you're free to go. If you want, we can take some time to [explore some additional figures](https://www.r-graph-gallery.com/index.html){target=\"_blank\"} we might produce like [maps](https://jtr13.github.io/cc19/different-ways-of-plotting-u-s-map-in-r.html){target=\"_blank\"} or [lollipop](https://www.r-graph-gallery.com/lollipop-plot.html){target=\"_blank\"} plots.\n\nOk, let's begin!\n\n .html file{.unnumbered}\n\nFor every lab:\n\n-   Download the file\n-   Save it in your course folder\n-   Render the document\n-   Open the html file in your browser (Easier to read)\n-   Check `Render on Save` and render the document again after completing a section or chunk (Error checking)\n-   Upload the final lab to [Canvas](https://canvas.brown.edu/courses/1094972/assignments){target=\"_blank\"}.\n\n# Describe the components of the figure you're trying to reprodce\n\nRecall, that we need `data`, `aesthetic` mappings and `geometries` to produce a figure. You can find the code from lab 1 [here](https://pols1600.paultesta.org/labs/01-lab-comments#uncomment-the-code-below-to-visualize-this-cases_by_month_and_policy)\n\n-   What is the data set used? (Hint it's a transformation of `covid_us`)\n    -   From the comments to last week's lab, I know I need to produce something like `cases_by_month_and_policy` from the `covid_us` data\n-   What are the aesthetic mappings in this plot\n    -   `x` average number of new cases per capita by month and policy\n    -   `y` a variable indexing year and month\n    -   `col` a variable indexing the face mask policy in place\n-   What is the geometry?\n    -   points using `geom_point()`\n\n\n# Outline the steps you will need to complete this process {.unnumbered}\n\n1.  Set up our work space\n2.  Download the COVID-19 data\n3.  Get a high level overview of the data\n4.  Recode the data\n  - create per capita measure of new cases\n  - create measure of face mask policy\n  - create year-month variable for summarizing\n5.  Calculate the average number of new cases in a given month for states with a given policy on face masks\n6.  Produce an initial figure\n7.  Refine the figure\n\n# Set up our workspace\n\nFirst we need to get R ready to work by loading (and if need installing) any packages that we will be using.\n\n## Create an object listing all the packages I will use today\n\nThis code creates a object called `the_packages` which contains a vector of character strings corresponding to the names of the packages I want to use today\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthe_packages <- c(\n  ## R Markdown\n  \"tinytex\", \"kableExtra\",\n  ## Tidyverse\n  \"tidyverse\",\"lubridate\", \"forcats\", \"haven\",\"labelled\",\n  ## Extensions for ggplot\n  \"ggmap\",\"ggrepel\", \"ggridges\", \"ggthemes\",\"ggpubr\",\n  \"GGally\",\n  # Data \n  \"COVID19\",\"maps\",\"mapdata\",\"DT\"\n)\n```\n:::\n\n\n## Define a function to install and load packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nipak <- function(pkg){\n    new.pkg <- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\n    if (length(new.pkg)) \n        install.packages(new.pkg, dependencies = TRUE)\n    sapply(pkg, require, character.only = TRUE)\n}\n```\n:::\n\n\n## Use the ipak function to load the necessary packages\n\nNow I run the `ipak()` giving it the object `the_packages` as an input. It sorts through the packages, checks to see if they're installed, if not installs them, and then loads all of the packages so I can use them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nipak(the_packages)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   tinytex kableExtra  tidyverse  lubridate    forcats      haven   labelled \n      TRUE       TRUE       TRUE       TRUE       TRUE       TRUE       TRUE \n     ggmap    ggrepel   ggridges   ggthemes     ggpubr     GGally    COVID19 \n      TRUE       TRUE       TRUE       TRUE       TRUE       TRUE       TRUE \n      maps    mapdata         DT \n      TRUE       TRUE       TRUE \n```\n\n\n:::\n:::\n\n\n# Download the COVID-19 data\n\nNow, I'll load the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(url(\"https://pols1600.paultesta.org/files/data/covid.rda\"))\n```\n:::\n\n\n# Get a high level overview of the data\n\nThere are lots of ways to do this. At a minium\n\n-   Get a sense of the dimensions of the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(covid)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 58809    47\n```\n\n\n:::\n:::\n\n\n-   Take a look at the first few rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(covid)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        id       date confirmed deaths recovered tests vaccines\n1 10b692cc 2020-03-16        NA     NA        NA    NA       NA\n2 10b692cc 2020-03-17        NA     NA        NA    NA       NA\n3 10b692cc 2020-03-18        NA     NA        NA    NA       NA\n4 10b692cc 2020-03-19        NA     NA        NA    NA       NA\n5 10b692cc 2020-03-20        NA     NA        NA    NA       NA\n6 10b692cc 2020-03-21        NA     NA        NA    NA       NA\n  people_vaccinated people_fully_vaccinated hosp icu vent school_closing\n1                NA                      NA   NA  NA   NA             NA\n2                NA                      NA   NA  NA   NA             NA\n3                NA                      NA   NA  NA   NA             NA\n4                NA                      NA   NA  NA   NA             NA\n5                NA                      NA   NA  NA   NA             NA\n6                NA                      NA   NA  NA   NA             NA\n  workplace_closing cancel_events gatherings_restrictions transport_closing\n1                NA            NA                      NA                NA\n2                NA            NA                      NA                NA\n3                NA            NA                      NA                NA\n4                NA            NA                      NA                NA\n5                NA            NA                      NA                NA\n6                NA            NA                      NA                NA\n  stay_home_restrictions internal_movement_restrictions\n1                     NA                             NA\n2                     NA                             NA\n3                     NA                             NA\n4                     NA                             NA\n5                     NA                             NA\n6                     NA                             NA\n  international_movement_restrictions information_campaigns testing_policy\n1                                  NA                    NA             NA\n2                                  NA                    NA             NA\n3                                  NA                    NA             NA\n4                                  NA                    NA             NA\n5                                  NA                    NA             NA\n6                                  NA                    NA             NA\n  contact_tracing facial_coverings vaccination_policy elderly_people_protection\n1              NA               NA                 NA                        NA\n2              NA               NA                 NA                        NA\n3              NA               NA                 NA                        NA\n4              NA               NA                 NA                        NA\n5              NA               NA                 NA                        NA\n6              NA               NA                 NA                        NA\n  government_response_index stringency_index containment_health_index\n1                        NA               NA                       NA\n2                        NA               NA                       NA\n3                        NA               NA                       NA\n4                        NA               NA                       NA\n5                        NA               NA                       NA\n6                        NA               NA                       NA\n  economic_support_index administrative_area_level administrative_area_level_1\n1                     NA                         2               United States\n2                     NA                         2               United States\n3                     NA                         2               United States\n4                     NA                         2               United States\n5                     NA                         2               United States\n6                     NA                         2               United States\n  administrative_area_level_2 administrative_area_level_3 latitude longitude\n1    Northern Mariana Islands                        <NA> 14.15569  145.2119\n2    Northern Mariana Islands                        <NA> 14.15569  145.2119\n3    Northern Mariana Islands                        <NA> 14.15569  145.2119\n4    Northern Mariana Islands                        <NA> 14.15569  145.2119\n5    Northern Mariana Islands                        <NA> 14.15569  145.2119\n6    Northern Mariana Islands                        <NA> 14.15569  145.2119\n  population iso_alpha_3 iso_alpha_2 iso_numeric iso_currency key_local\n1      55144         USA          US         840          USD        69\n2      55144         USA          US         840          USD        69\n3      55144         USA          US         840          USD        69\n4      55144         USA          US         840          USD        69\n5      55144         USA          US         840          USD        69\n6      55144         USA          US         840          USD        69\n  key_google_mobility       key_apple_mobility key_jhu_csse key_nuts key_gadm\n1                <NA> Northern Mariana Islands         US69       NA      MNP\n2                <NA> Northern Mariana Islands         US69       NA      MNP\n3                <NA> Northern Mariana Islands         US69       NA      MNP\n4                <NA> Northern Mariana Islands         US69       NA      MNP\n5                <NA> Northern Mariana Islands         US69       NA      MNP\n6                <NA> Northern Mariana Islands         US69       NA      MNP\n```\n\n\n:::\n:::\n\n\n-   Get a quick sense of the values of key variables to see if there's any recoding you need to do (like with the negative values for `facial_coverings`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(covid$facial_coverings)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n   -4    -3    -2    -1     0     1     2     3     4 \n  410  5897  7362   275  3893  8604 17424  9191   622 \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(covid$confirmed)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.     NA's \n       1    61491   317696   814586   956903 11826466     1459 \n```\n\n\n:::\n:::\n\n\n# Recode the data\n\nThis is a complex task.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://pols1600.paultesta.org/labs/images/recode.jpeg)\n:::\n:::\n\n\nSo lets break it down conceptually. Roughly we'll need to:\n\n-   Filter out U.S. territories\n-   Create a variable called `state` from the `administrative_area_level_2` variable\n-   Group by this state variable and calculate:\n    -   the number of new cases in a state on given day\n    -   the number of new cases in a state on given day per capita\n    -   the type of face mask policy in effect in a state.\n    -   A variable that contains just the year and month of a given observation\n\nI'd probably use the code from the comments to [Lab 01](https://pols1600.paultesta.org/labs/01-lab-comments.html#replicate-the-data-cleaning-and-recoding-from-class){target=\"_blank\"} as my guide.\n\nThat code will also calculate the percentage of a state's population that's vaccinated, which might be interesting to explore later.\n\n## Filter out U.S. Territories\n\nFor simplicity, (and practice filtering observations), I've asked us to remove observations from U.S. territories.\n\nThe code below\n\n-   Creates an object called `us_territories`.\n-   Use this object to filter out observations that are US territories\n-   Creates a new data frame that is just observations from the 50 U.S. states. and D.C.\n-   Checks that this recoding seems to have worked\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# U.S. Territories\nterritories <- c(\n  \"American Samoa\",\n  \"Guam\",\n  \"Northern Mariana Islands\",\n  \"Puerto Rico\",\n  \"Virgin Islands\"\n  )\n\n# Filter out U.S. Territories\ncovid_us <- covid %>%\n  filter(!administrative_area_level_2 %in% territories)\n\n# Check to make sure covid_us contains only 50 states and D.C.\ndim(covid)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 58809    47\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(covid_us)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 53678    47\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(unique(covid$administrative_area_level_2)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 56\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(unique(covid_us$administrative_area_level_2)) == 51\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n## Create a `state` variable\n\nThis is purely for convenience, because typing `administrative_area_level_2` is annoying. The code copies the values of this variable into a new variable called `state` using the `mutate()` function.\n\nMutate returns the original data frame plus the new column. We have to save this output for our our changes to persist (i.e. we have to assign the output of `mutate()` back into `covid_us`)\n\nIn last week's lab, I just `piped` the output to the next command, did some more recoding with mutate, and then finally saved the output back into `covid_us`. In this lab, I'll save the output after each step.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_us %>%\n  mutate(\n    state = administrative_area_level_2,\n  ) -> covid_us\n```\n:::\n\n\n## Group by the `state` variable to calculate new Covid-19 cases\n\nNow I use this shorter variable `state` to calculate the number of new cases (`new_cases`) in a given state on a given date, and rescale this variable so that it's expressed in terms of new cases per 100,000 residents.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_us %>%\n  dplyr::group_by(state) %>%\n  mutate(\n    new_cases = confirmed - lag(confirmed),\n    new_cases_pc = new_cases / population * 100000\n    ) -> covid_us\n```\n:::\n\n\nThe slides from Tuesday, helped demonstrate what this code was doing, and why we wanted to group by state.\n\nHere's an example for a subset of the data from April 1, 2020 to April 7, 2020\n\nWe see that the `lag()` function simply moves the observation of a variable \"up\" one row so that we can take the difference between the total number of cases in a state on one date and the total number of cases on the date before, to calculate the number of *new* cases\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_us %>%\n  filter(date >= \"2020-04-01\" & date < \"2020-04-07\")%>%\n  group_by(state) %>%\n  select(state, date, confirmed) %>%\n  mutate(\n    confirmed_lag1 = lag(confirmed),\n    new_cases = confirmed - lag(confirmed)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 306 × 5\n# Groups:   state [51]\n   state      date       confirmed confirmed_lag1 new_cases\n   <chr>      <date>         <int>          <int>     <int>\n 1 Minnesota  2020-04-01       689             NA        NA\n 2 Minnesota  2020-04-02       742            689        53\n 3 Minnesota  2020-04-03       789            742        47\n 4 Minnesota  2020-04-04       865            789        76\n 5 Minnesota  2020-04-05       935            865        70\n 6 Minnesota  2020-04-06       986            935        51\n 7 California 2020-04-01      9857             NA        NA\n 8 California 2020-04-02     11190           9857      1333\n 9 California 2020-04-03     12569          11190      1379\n10 California 2020-04-04     13796          12569      1227\n# ℹ 296 more rows\n```\n\n\n:::\n:::\n\n\nIf we hadn't grouped by state, then when we lagged the `confirmed` variable, R thinks the number of confirmed cases in California before April 1, 2020, is 986 which is actually the number of cases in Minnesota on April 7, 2020\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# No group_by would create errors where the last observation from\n# one state becomes the first lagged observation for the next state\ncovid_us %>%\n  filter(date >= \"2020-04-01\" & date < \"2020-04-07\") %>%\n  ungroup() %>%\n  select(state, date, confirmed) %>%\n  mutate(\n    confirmed_lag1 = lag(confirmed),\n    new_cases = confirmed - lag(confirmed)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 306 × 5\n   state      date       confirmed confirmed_lag1 new_cases\n   <chr>      <date>         <int>          <int>     <int>\n 1 Minnesota  2020-04-01       689             NA        NA\n 2 Minnesota  2020-04-02       742            689        53\n 3 Minnesota  2020-04-03       789            742        47\n 4 Minnesota  2020-04-04       865            789        76\n 5 Minnesota  2020-04-05       935            865        70\n 6 Minnesota  2020-04-06       986            935        51\n 7 California 2020-04-01      9857            986      8871\n 8 California 2020-04-02     11190           9857      1333\n 9 California 2020-04-03     12569          11190      1379\n10 California 2020-04-04     13796          12569      1227\n# ℹ 296 more rows\n```\n\n\n:::\n:::\n\n\n## Recode the `facial_coverings` variable\n\nNext we use the `case_when()` function inside the `mutate()` function to create a variable called `face_masks` based on the values of the `facial_coverings` variable in the data.\n\n`case_when()` when uses R's ability to make logical comparisons. When the variable `facial_coverings` equals 0, R will input the character string `\"No policy\"` into the `face_masks` variable.\n\nWhen the absolute value of `facial_coverings` equals 1 (i.e.`facial_coverings` equals 1 or -1 ), R will input the character string `\"Recommended\"` into the `face_masks` variable. And so on.\n\nWe use the `abs()` function to take the absolute value of the `facial_coverings` variable because codebook for these data implied:\n\n> In short: positive integers identify policies applied to the entire administrative area. Negative integers are used to identify policies that represent a best guess of the policy in force, but may not represent the real status of the given area. The negative sign is used solely to distinguish the two cases, it should not be treated as a real negative value.\n\nWe know from last weeks lab, that negative values in the U.S. typically seem to be cases where a city had a more stringent policy than the state (e.g. Chicago adopts more stringent face mask policies than Illinois).\n\nFinally, we put a `%>%` after the output of `case_when()` and pass it's output to the `factor()` function.\n\nThe `.` acts as sort of placeholder, `factor()` expects some input here (like a variable from a data frame), `.` tells R to use the output of `case_when()`.\n\nThe `levels =` then transforms the character data produced by `case_when()` into a `factor` with an implicit ordering of levels (i.e. \"No policy\" \\< \"Recommended\"\\< \"Some requirements\" \\<\"Required shared places\" \\<\"Required all times\") which turns out to be useful trick for organizing how data are plotted and visualized.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_us %>%\n  mutate(\n    face_masks = case_when(\n      facial_coverings == 0 ~ \"No policy\",\n      abs(facial_coverings) == 1 ~ \"Recommended\",\n      abs(facial_coverings) == 2 ~ \"Some requirements\",\n      abs(facial_coverings) == 3 ~ \"Required shared places\",\n      abs(facial_coverings) == 4 ~ \"Required all times\",\n    ) %>% factor(.,\n      levels = c(\"No policy\",\"Recommended\",\n                 \"Some requirements\",\n                 \"Required shared places\",\n                 \"Required all times\")\n    ) \n    ) -> covid_us\n```\n:::\n\n\n## Create a variable capturing the year and month of the observation\n\nFinally we create some variables that extract components of an observation's date:\n\n-   `year = year(date)` returns just the year from a variable of class `Date`\n-   `month = month(date)` returns just the month from a variable of class `Date`\n-   `year_month = paste(year, str_pad(month, width = 2, pad=0), sep = \"-\")` pastes these to variables together.\n-   `str_pad(month, width = 2, pad=0)` adds a leading 0 to any month with only 1 digit, to ensure that all the months have 2 characters.\n\nThe code from your lab also calculates the percent of a states population that is vaccinated, which isn't strictly needed for today.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_us %>%\n  mutate(\n    year = year(date),\n    month = month(date),\n    year_month = paste(year, str_pad(month, width = 2, pad=0), sep = \"-\"),\n    percent_vaccinated = people_fully_vaccinated/population*100  \n    ) -> covid_us\n```\n:::\n\n\nCreating separte `year` and `month` variables aren't strictly necessary,\n\nWe could have written something like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_us %>%\n  mutate(\n    year_month = paste(year(date), str_pad(month(date), width = 2, pad=0), sep = \"-\"),\n    percent_vaccinated = people_fully_vaccinated/population*100  \n    ) -> covid_us\n```\n:::\n\n\nBut that `year_month` line was already feeling kind of clunky, and maybe we'll want the `year` and `month` variables later.\n\n# Calculate the average number of new cases in a given month for states with a given policy on face mask\n\n-   To calculate averages, we'll use the `mean()` function\n-   To calculate averages separately by month and year and by type of face mask policy, we'll use the `group_by()` function.\n-   To make these values more legible, we'll round them to integers\n-   To count the total number of states with a given policy in a given month, we'll use the unique command to return a string with the list unique names of states with say Recommended face mask policies in a month (e.g. April 2020), and the `length()` command to count up how many states.\n-   Finally we'll save the output of this collection of code to an object called `cases_by_month_and_policy` which we'll use to produce our figure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data\ncovid_us %>%\n  # Exclude observations with missing values on face_masks\n  filter(!is.na(face_masks))%>%\n  # Calculate summaries separately by Year-Month and face-mask policy\n  group_by(year_month,face_masks) %>%\n  # Summaries\n  summarise(\n    # Total number of observations\n    n = length(unique(state)),\n    # Average number of cases per capita\n    new_cases_pc = round(mean(new_cases_pc, na.rm = T )),\n    # Average number of total cases\n    total_cases = round(mean(confirmed, na.rm = T))\n  ) -> cases_by_month_and_policy\n```\n:::\n\n\n# Reproduce the figure from Lab 01\n\nFinally use `cases_by_month_and_policy` data frame to create a figure.\n\nRecalling our **grammar of graphics**:\n\n-   `data` = `cases_by_month_and_policy`\n-   `ggplot(...)` initializes the plotting environment\n-   `aes()` maps variables in `cases_by_month_and_policy` to `aesthetic` features of the graph:\n    -   `x= year_month` says to use values of `year_month` column on the x axis\n    -   `y = new_cases_pc` says use values from the `new_cases_pc` on the y axis\n    -   `col=face_masks` says to use a unique color each value of `face_masks` column\n-   `geom_point()` says to plot points using the aesthetic mappings we defined in `ggplot` with the `aes()` function\n-   `coord_flip()` flips the coordinates of the plot so that the values of x axis are now on the y axis, and the values of the y axis are now on the x axis.\n-   Finally `-> fig1` saves the output of this code to an object called `fig1`. Writing this object on it's own line will display the figure. Saving the our figure as an object will allow us to update it\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data\ncases_by_month_and_policy %>%\n  ggplot(\n    # Aesthetics\n    aes(\n    x = year_month,\n    y = new_cases_pc,\n    col = face_masks)\n    ) +\n  # Geometries\n  geom_point() +\n  # Coordinates\n  coord_flip() -> fig1\n\nfig1\n```\n\n::: {.cell-output-display}\n![](02-lab-comments_files/figure-html/fig1-1.png){width=672}\n:::\n:::\n\n\n# Revise the figure in some way\n\n- Perhaps add a title and label. Or change the aesthetic mappings. Or maybe facet the figure by some other variable.\n\n- Check out the examples from [Tuesday's slides](https://pols1600.paultesta.org/slides/02-slides#/dataviz-describing-distributions-and-associations)\n\nLet's see if we can improve this figure by:\n\n-   Adding meaningful labels and a title\n-   Changing the theme\n-   Changing the size of the points to reflect the total number of states with a policy in that month\n-   Faceting our plot by face mask policy\n\n## Adding meaningful labels and title\n\nBecause we saved the output of our `ggplot` to an object called `fig1` we can add additional commands to this object using the `+` without having to rewrite all the code.\n\nFirst let's add better labels to the graph.\n\n-   Note that even though we flipped the coordinates, the `aes` aesthetic mappings stay the same. So to change the label of the figures y-axis to \"Date\" we change the label of `x = \"Date\"`\n-   `ggplot` automatically generates a legend for aesthetic mappings like `color` We can add a line break using the the special character `\\n` in our code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfig1 +\n  labs(\n    x = \"Date\",\n    y = \"Average number of new cases (per 100k)\",\n    col = \"Face Mask\\n Policy\"\n  )\n```\n\n::: {.cell-output-display}\n![](02-lab-comments_files/figure-html/fig1labelled-1.png){width=672}\n:::\n:::\n\n\nNote the code above didn't update `fig1`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfig1\n```\n\n::: {.cell-output-display}\n![](02-lab-comments_files/figure-html/fig1orig-1.png){width=672}\n:::\n:::\n\n\nWe have to save the output (if we like it) for our changes to persist.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfig1 +\n  labs(\n    x = \"Date\",\n    y = \"Average number of new cases (per 100k)\",\n    col = \"Face Mask\\nPolicy\"\n  ) -> fig1\n\nfig1\n```\n\n::: {.cell-output-display}\n![](02-lab-comments_files/figure-html/fig1labs-1.png){width=672}\n:::\n:::\n\n\n## Changing the theme of the plot\n\nHere's an example of some different themes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Black and white\nfig1 +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](02-lab-comments_files/figure-html/figthemes-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Minimal\nfig1 +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](02-lab-comments_files/figure-html/figthemes-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Classic\nfig1 +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](02-lab-comments_files/figure-html/figthemes-3.png){width=672}\n:::\n:::\n\n\nThis is pretty personal, and depends of the figure itself. I like a white background and some guide lines:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfig1 +\n  theme_bw() -> fig1\n\nfig1\n```\n\n::: {.cell-output-display}\n![](02-lab-comments_files/figure-html/fig1theme-1.png){width=672}\n:::\n:::\n\n\n## Make the size of the dots reflect the number of states with this policy\n\nIn the `cases_by_month_and_policy` we have a column called `n` which is the number of states which had a given policy in a given month.\n\nWe can add an aesthetic to our plot that varies the size of the points by the number of states.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfig1 +\n  aes(size = n) -> fig1\n```\n:::\n\n\nWe call this type of plot a [bubble plot](https://www.r-graph-gallery.com/bubble-chart.html){target=\"\\_blank\"\n\nI have mixed feelings about multiple legends. We can remove the legend for size using the `scale_size()` function. I had to Google how to do this for the millionth time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfig1 +\n  scale_size(guide = \"none\") -> fig1\n```\n:::\n\n\n## Facet the plot\n\nVarying the size of the dots by the number of states conveys more information. But makes the chart a little harder to read. Dots overlap.\n\nThe `facet_wrap` command will produce separate bubble plots for each level of the \"facetting\" variable, in this case \\`face_masks\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfig1 +\n  facet_wrap(~face_masks) -> fig1\nfig1\n```\n\n::: {.cell-output-display}\n![](02-lab-comments_files/figure-html/fig1facet-1.png){width=672}\n:::\n:::\n\n\nNow I think also want a second legend for the number of states\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfig1 +\n  scale_size(guide = \"legend\")+\n  labs(\n    size = \"# of States\\nwith Policy\"\n  )-> fig1\nfig1\n```\n\n::: {.cell-output-display}\n![](02-lab-comments_files/figure-html/fig1facetguide-1.png){width=672}\n:::\n:::\n\n\nThis seems pretty good if our goal was to show in general terms\n\n-   It shows the average number new cases for states with a given face mask policy over time.\n-   It shows how the mix of types of face mask policies states have adopted has changed over time\n\nIf our goal was to make comparisons across face mask policies over a given time period, I'm might still prefer something closer to our original graph.\n\n# CLASS SURVEY\n\nFinally, please take a moment to complete this week's [class survey](https://brown.co1.qualtrics.com/jfe/form/SV_a3ixUUmIktNBd7E)\n",
    "supporting": [
      "02-lab-comments_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}