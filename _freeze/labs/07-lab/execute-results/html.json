{
  "hash": "478a71238dc912972f009c5133f85947",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Lab 07 - Replicating Grumbach and Hill (2022):'\nsubtitle: \"Understanding the Data and Design \"\nauthor: \"P.F. Testa\"\ndate: \"Last Updated 2024-03-12\"\nformat:\n  html:\n    toc: true\n    toc-location: right\n    toc-float: true\n    toc-depth: 2\n    number-sections: true\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  message: false\n  cache: true\n---\n\n\n\n# Overview {.unnumbered}\n\nIn this lab, we will begin the process of replicating Grumbach and Hill (2021) \"Rock the Registration: Same Day Registration Increases Turnout of Young Voters.\"\n\nTo accomplish this we will:\n\n0. Load packages and set the working directory to **where this file is saved**. (5 minutes)\n\n1. **Summarize the study** in terms of it's research question, theory, design, and results. (10 minutes)\n\n2. Download the replication files and **save them in the same folder as this lab** (5 minutes)\n\n3. **Load the data** from your computers into R (5 minutes)\n\n4. Get a quick **HLO** of the data (10 minutes)\n\n5. **Merge** data on election policy into data on voting (5 minutes, together),\n\n6. **Recode** the covariates, key predictors, and outcome for the study (10 minutes, partly together)\n\n7. Recreate **Figure 1** (15 minutes)\n\n8. Recreate **Figure 2** (15 minutes)\n\nFinally, we'll take the weekly survey which should be a **fun** one\n\nOne of these 8 tasks will be randomly selected as the graded question for the lab.\n\nYou will work in your assigned groups. Only one member of each group needs to submit the html file of lab.\n\nThis lab **must** contain the names of the group members in attendance.\n\nIf you are attending remotely, you will submit your labs individually.\n\nHere are your assigned groups for the semester.\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-6cf55b72df3386bf8fa6\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-6cf55b72df3386bf8fa6\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"],[\"Group 1\",\"Group 2\",\"Group 3\",\"Group 4\",\"Group 5\",\"Group 6\",\"Group 7\",\"Group 8\"],[\"Maia Eng\",\"Andrew Rovinsky\",\"Serafym Rybachkivskyi\",\"Tiffany Eddy\",\"Christopher Maron\",\"Mia Hamilton\",\"Mariana Melzer\",\"Logan Szittai\"],[\"Guadalupe Herrera\",\"Spencer Lorin\",\"Rachel Kim\",\"Daniel Solomon\",\"Daniel Baker\",\"Emily Colon\",\"Kahrie Langham\",\"Keiley Thompson\"],[\"Stephen Robinson\",\"Lucinda Anderson\",\"Kai Blades\",\"Zoe Smith\",\"Neve Diaz-Carr\",\"Davis Kelly\",\"Shannon Feerick-Hillenbrand\",\"Lydell Dyer\"],[\"Jeremiah Harrington\",\"Serenity Hamilton\",\"Emma Coleman\",\"Lorena Calderon\",\"Olivia Hanley\",\"Talia Levine\",\"Jarret Fernandes\",\"Mahir Arora\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Group<\\/th>\\n      <th>1<\\/th>\\n      <th>2<\\/th>\\n      <th>3<\\/th>\\n      <th>4<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"Group\",\"targets\":1},{\"name\":\"1\",\"targets\":2},{\"name\":\"2\",\"targets\":3},{\"name\":\"3\",\"targets\":4},{\"name\":\"4\",\"targets\":5}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n# Goals {.unnumbered}\n\nThis week's lab will give you practice:\n\n- Summarizing academic work (Q1)\n\n- Loading data into R from your own computer (rather than just downloading it from the web) (Q2-3)\n\n- Looking at new data and figuring out what you need to do (e.g. merging, recoding) before you can analyze it (Q4-6)\n\n- Creating and interpreting figures that summarize aspects of a study's design and data (Q7-8)\n\nNext week, we'll get into the nuts and bolts of replicating Grumbach and Hill's main results\n\n\n# Workflow {.unnumbered}\n\n## Please render this .qmd file {.unnumbered}\n\nAs with every lab, you should:\n\n-   Download the file\n-   Save it in your course folder\n-   **Update the `author:` section of the YAML header to include the names of your group members in attendance.**\n-   Render the document\n-   Open the html file in your browser (Easier to read)\n-   Write your code in the **chunks provided under each section**\n-   Comment out or delete any test code you do not need\n-   **Render the document again after completing a section or chunk** (Error checking)\n-   Upload the final lab to [Canvas](https://canvas.brown.edu/courses/1094972/assignments){target=\"_blank\"}.\n\n# Get set up to work{.unnumbered}\n\n\n## Load packages {.unnumbered}\n\n\nAs always, let's load the packages we'll need for today\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthe_packages <- c(\n  ## R Markdown\n  \"kableExtra\",\"DT\",\"texreg\",\"htmltools\",\n  ## Tidyverse\n  \"tidyverse\", \"lubridate\", \"forcats\", \"haven\", \"labelled\",\n  ## Extensions for ggplot\n  \"ggmap\",\"ggrepel\", \"ggridges\", \"ggthemes\", \"ggpubr\", \n  \"GGally\", \"scales\", \"dagitty\", \"ggdag\", \"ggforce\",\n  # Data \n  \"COVID19\",\"maps\",\"mapdata\",\"qss\",\"tidycensus\", \"dataverse\",\n  \"janitor\",\n  # Analysis\n  \"DeclareDesign\", \"easystats\", \"zoo\"\n)\n\n# Define function to load packages\nipak <- function(pkg){\n    new.pkg <- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\n    if (length(new.pkg)) \n        install.packages(new.pkg, dependencies = TRUE)\n    sapply(pkg, require, character.only = TRUE)\n}\n\nipak(the_packages)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   kableExtra            DT        texreg     htmltools     tidyverse \n         TRUE          TRUE          TRUE          TRUE          TRUE \n    lubridate       forcats         haven      labelled         ggmap \n         TRUE          TRUE          TRUE          TRUE          TRUE \n      ggrepel      ggridges      ggthemes        ggpubr        GGally \n         TRUE          TRUE          TRUE          TRUE          TRUE \n       scales       dagitty         ggdag       ggforce       COVID19 \n         TRUE          TRUE          TRUE          TRUE          TRUE \n         maps       mapdata           qss    tidycensus     dataverse \n         TRUE          TRUE          TRUE          TRUE          TRUE \n      janitor DeclareDesign     easystats           zoo \n         TRUE          TRUE          TRUE          TRUE \n```\n\n\n:::\n:::\n\n\nWe will also want to **set our working directory** to where your lab is saved.\n\n## IMPORTANT: Set your working directory {.unnumbered}\n\n\n1. On the top panel of R Studio click: \n\n> Session Session > Set working directory > Source file location\n\n2. Paste the output that shows up in your console into the code chunk below\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set working directory\n# Session > Set working directory > Source file location\n# paste output here:\n```\n:::\n\n\nAll right, now let's summarize the study\n\n# Summarize the study\n\nIn a few sentences please answer the following questions about Grumbach and Hill (2021). I'll get you started:\n\n- **What's research question?** Broadly, Grumbach and Hill (2021 p. 405) are interested in whether \"election reform improve turnout among young people?\" Specifically, Grumbach and Hill assess whether turnout is higher among younger voters in states with Same-Day-Registration (SDR) laws. \n\n- **What's the theory motivating the research question and expectations?** Grumbach and Hill (henceforth, G&H) contribute to and draw on a broad literature on voting in the field of political behavior. While past work has found ...\n\n- **What's the empirical design?** G&H draw on a variety of datasets to test their claim. Their primary data for their main analyses comes from the ... \n\n- **What's the core finding?** The main results of their analyses are presented in ...\n\n\n\n# Download the replication files\n\nOk now let's download the replication files from the paper's [replication archive](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/AW5LU8){target=\"_blank\"}\n\nPlease see the [slides](https://pols1600.paultesta.org/slides/07-slides#/go-to-the-papers-dataverse){target=\"_blank\"}\n\nMake sure the files are **unzipped and saved** in  the **SAME folder as this lab**\n\n\n\n# Load the data\n\nThere should be 11 total files in the dataverse_files folder. We're only going to use three of the data files for this replication\n\nPlease uncomment and run the code below\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load fips_codes\n# fips_codes <- read_csv(\"dataverse_files/fips_codes_website.csv\")%>%\n#   janitor::clean_names()\n# \n# # Load policy data\n# policy_data <- readRDS(\"dataverse_files/policy_data_updated.RDS\")%>%\n#   janitor::clean_names()\n# \n# # Load CPS data\n# cps <- read_csv(\"dataverse_files/cps_00021.csv\") %>%\n#   janitor::clean_names()\n```\n:::\n\n\n:::{callout-note}\nThe `janitor::clean_names()` after each `read_XXX()` function converts column names to snake case\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Backup code if you run into major issues downloading and unzipping the files\n# DONT UNCOMMENT UNLESS YOU NEED TO\n\n# Sys.setenv(\"DATAVERSE_SERVER\" = \"dataverse.harvard.edu\")\n# \n# \n# # Load fips_codes\n# fips_codes <- get_dataframe_by_name(\n#   \"fips_codes_website.tab\",\n#   \"doi:10.7910/DVN/AW5LU8\"\n# ) %>% janitor::clean_names()\n# \n# # Load policy data\n# policy_data <- get_dataframe_by_name(\n#   \"policy_data_updated.RDS\",\n#   \"doi:10.7910/DVN/AW5LU8\",\n#   .f = readRDS\n# ) %>% janitor::clean_names()\n# \n# # Load CPS data\n# cps <- get_dataframe_by_name(\n#   \"cps_00021.csv\",\n#   \"doi:10.7910/DVN/AW5LU8\",\n#   .f = read_csv\n# ) %>% janitor::clean_names()\n```\n:::\n\n\n\n# Get a HLO of each dataset\n\nIn the code chunk below, please take a quick look at each dataset and answer the following for about each dataset. I'll get you started for `fips_codes`\n\n- `fips_codes`\n  - **What is the unit of analysis?** Federal Information Processing Standards (FIPS) state and county codes\n  - **How many observations** 41,787 observations\n  - **How many variables** 33 variables\n  - **What variables identify US states** `st` and `statefip`\n\n- `data`\n  - **What is the unit of analysis?** State-years\n  - **How many observations** 2,450 observations\n  - **How many variables** 33 variables\n  - **What variable describes whether a state had Same Day Registration (SDR)** `sdr`\n\n- `cps`\n  - **What is the unit of analysis?** A respondent to the CPS, a US resident\n  - **How many observations** 3,039,807 respondents\n  - **How many variables** 25 variables\n  - **What variables describe whether someone voted and how old they are** `voted`, and `age`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# HLO fips_codes\ndim(fips_codes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3256    5\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(fips_codes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"state\"       \"state_code\"  \"state_name\"  \"county_code\" \"county\"     \n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(fips_codes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,256\nColumns: 5\n$ state       <chr> \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\"…\n$ state_code  <chr> \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\"…\n$ state_name  <chr> \"Alabama\", \"Alabama\", \"Alabama\", \"Alabama\", \"Alabama\", \"Al…\n$ county_code <chr> \"001\", \"003\", \"005\", \"007\", \"009\", \"011\", \"013\", \"015\", \"0…\n$ county      <chr> \"Autauga County\", \"Baldwin County\", \"Barbour County\", \"Bib…\n```\n\n\n:::\n\n```{.r .cell-code}\n# HLO policy_data\n\n\n# HLO cps\n```\n:::\n\n\n\n\n# Merge `policy_data` into `cps` data\n\nTo replicate the paper's main results we need to merge the data on election laws in the `policy_data` dataframe into the data on voting in the `cps` data frame.\n\nTo merge `policy_data` into `cps`, we first need to merge the `st` column (State postal abbreviations of) from `fips_codes` into `cps` by the common `statefip` variable that is common to both `cps` and `state_fip`\n\nThen we can merge `policy_data` into `cps` by the common variables `st` and `year` to match the policies in a given state and year to observations in `cps` from that state in that year.\n\nTo avoid complications that from running merge code multiple times, we will save the output of  each merge into temporary dataframes (e.g. `tmp1`), and then we're confident we have done this correctly, will save the final merged data back into `cps`.\n\nFollowing Grumbach and Hill, we'll also filter out any observations before 1978 and all observations from DC and North Dakota (why?). \n\nPlease uncomment and run the following code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Merge state abbreviations (st) into CPS using statefip\n# tmp1 <- cps %>% dplyr::left_join(fips_codes %>%\n#                       select(st, statefip),\n#                       by = \"statefip\",\n#                     multiple = \"first\"\n#                     )\n# # tmp1 is cps with the added column \"st\"\n# dim(tmp1)\n# names(tmp1)[26]\n# dim(cps)\n# \n# # Merge policy data into tmp1 using common variables `st` and `year`\n# tmp2 <- tmp1 %>% dplyr:: left_join(\n#   policy_data,\n#   by = c(\"st\", \"year\")\n# )\n# \n# # Check merges\n# dim(tmp2)\n# dim(tmp1)\n# # New variables in tmp2 not in tmp1\n# names(tmp2)[!names(tmp2) %in% names(tmp1)]\n# \n# # Filter out DC, ND, and observations before 1978\n# tmp2 %>%\n#   filter(!st %in% c(\"DC\",\"ND\"))%>%\n#   filter(year>=1978) -> tmp3\n# \n# # Replace cps with merged data\n# cps <- tmp3\n# # Tidy up: remove temporary data frames\n# rm(list=c(\"tmp1\",\"tmp2\",\"tmp3\"))\n```\n:::\n\n\n# Examine and recode the data\n\nThe **primary outcome** of interest for this paper, is whether someone said they `voted` in a given year.\n\nThe **treatment** is the effect of living in state with **same day registration** which is captured by the `sdr` variable.\n\nThe **key predictor** will be indicators of a respondent's **age_cohort** which we **need to create** from the `age` variable. \n\nNext lab we will also look at models that the control for the following covariates:  \n\n- `education` recoded from the original `educ` variable in the `cps` collapsing \n- `race_f` a factor variable recoded from the original `race` variable in the `cps`\n  - Indicators for respondents who identify as only one race (ie `is_white`)^[The CPS coding on this is not great and there's no measure of ethnicity in these data. Forgive the crude indicators, but their necessary to recreate some of Grumbach and Hill's analysis next week. ]\n- `income` recoded from the original `faminc` variable in the `cps`\n- `is_female` recoded from the original `sex` variable in the `cps`\n\n> Below we will recode the data for analysis. I will recode the covariates and the key predictors. Then **you will write code to look at and recode the outcome.**\n\n## Recode covariates\n\nThe CPS are messy data. Please run the code below to recode the covariates in the spirit of (i.e. with minor changes) what Grumbach and Hill did. ^[Note the way the recoding is described in the appendix to the paper is not how it is actually implemented in the replication code in `rock_the_reg_replication_code.R`. For example, the appendix describes income as ranging from 1 (Under \\$10k) to 16 (\\$500k and above), when their code, implemented above produces 32 unique values, in part because the way the CPS asked and coded the income question changed overtime. We're going to roll with it for now...]\n\n:::{.callout-note}\nThe file `cps_00021.cbk.txt` contains the **codebook** for the data, telling us what numeric values of each variable correspond to substantively. So if you're wondering **how I know** what should be recoded to what specific values, it comes from reading the codebook, looking at Grumbach and Hill's code, looking at the raw variable with a table, and the using `case_when()` to judiciously code the data. You'll get practice doing this in your final projects, but I don't want to spend too much time on this this lab, which is why you're only recoding the outcome `voted`\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Recode covariates\n# cps %>% \n#   mutate(\n#     # Useful for plotting figure 2\n#     SDR = ifelse(sdr == 1, \"SDR\", \"non-SDR\"),\n#     education = case_when(\n#       educ == 1 ~ NA, #Blank\n#       educ < 40 ~ 1, # No high school\n#       educ >= 40 & educ < 73 ~ 2, # Some high school\n#       educ == 73 ~ 3, # High school degree\n#       educ >= 80 & educ <= 110 ~ 4, # Some college\n#       educ >= 111 & educ <123 ~ 5, # BA degree (And weirdly people who completed 5, 5+ and 6+ years of college)\n#       educ >= 123 & educ <=125 ~ 6, # BA degree (And weirdly people who completed 5, 5+ and 6+ years of college)\n#       educ == 999 ~ NA # Missing/unknown\n#     ),\n#     race_f = case_when(\n#       race == 999 ~ NA,\n#       T ~ factor(race)\n#     ),\n#     is_white = case_when(\n#       race == 100 ~ 1,\n#       race == 999 ~ NA,\n#       T ~ 0\n#     ),\n#     is_black = case_when(\n#       race == 200 ~ 1,\n#       race == 999 ~ NA,\n#       T ~ 0\n#     ),\n#     is_aapi = case_when(\n#       race == 650 ~ 1,\n#       race == 651 ~ 1,\n#       race == 652 ~ 1,\n#       race == 999 ~ NA,\n#       T ~ 0\n#     ),\n#     is_other = case_when(\n#       is_white == 1 ~ 0,\n#       is_black == 1 ~ 0,\n#       is_aapi ==  1 ~ 0,\n#       race == 999 ~ NA,\n#       T ~ 1\n#     ),\n#     income = case_when(\n#       faminc > 843 ~ NA, # Remove Missing/Refused\n#       T ~ as.numeric(factor(faminc))\n#     ),\n#     is_female = case_when(\n#       sex == 2 ~ 1,\n#       sex == 1 ~ 0,\n#       T ~ NA # recode Not in Universe as NA\n#     )\n#     \n#   ) -> cps\n```\n:::\n\n\n\n## Create `age_group` and age_group_XX_XX indicators\n\nNext we'll create an `age_group` variable and binary indicators for each age cohort of the form `age_group_XX_XX`.\n\nPlease uncomment and run the code below\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Create age variables\n# cps %>% \n#   mutate(\n#     age_group = case_when(\n#       age > 18 & age <= 24 ~ \"18-24\",\n#       age > 24 & age <= 34  ~ \"25-34\",\n#       age > 34 & age <= 44  ~ \"35-44\",\n#       age > 44 & age <= 54  ~ \"45-54\",\n#       age > 54 & age <= 64  ~ \"55-64\",\n#       age > 64 ~ \"65+\",\n#       T ~ NA\n# \n#     ),\n#     age_group_18_24 = ifelse(age_group == \"18-24\", 1, 0),\n#     age_group_25_34 = ifelse(age_group == \"25-34\", 1, 0),\n#     age_group_35_44 = ifelse(age_group == \"35-24\", 1, 0),\n#     age_group_45_54 = ifelse(age_group == \"45-24\", 1, 0),\n#     age_group_55_64 = ifelse(age_group == \"55-24\", 1, 0),\n#     age_group_65plus = ifelse(age_group == \"65+\", 1, 0)\n#   ) -> cps\n```\n:::\n\n\n## Check age recodes\n\nIt's good practice when recoding, to check the output. Please use the `table()` to create a **cross-tab** of `age_group` and `age_group_18_24`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|label: checkage\n\n# Compare age_group to age_group_18_24 using table()\n```\n:::\n\n\n**Explain in words how the variable `age_group_18_24` relates to the variable `age_group`** \n\n## Recode the outcome\n\nNow it's your turn. Please do the following:\n\n- **Look** at the variable `voted` using the `table()` function\n  - `1` corresponds to **Did not vote**\n  - `2 corresponds to **Voted**\n  - `96`,`97`,`98` to people who didn't provide and answer, or didn't remember\n  - `99` corresponds to people [who shouldn't be in the sample (\"Not in universe\")](https://cps.ipums.org/cps-action/faq){target=\"_blank\"}\n\n- Create a new variable called `dv_voted` using `case_when()` inside of `mutate()` that is:\n  - 1 when `voted == 2`\n  - 0 when `voted == 1`,\n  - 0 when `voted > 2 & voted <99`\n  - `NA` when `voted == 99`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at distribution of voted using table()\n\n\n# Create variable dv_voted using mutate(), case_when(), and voted variable\n```\n:::\n\n\n## Save the recoded data\n\nFinally, let's save our recoded data to file called `cps_clean.rda` that we can use for next week's lab\n\nUncomment and run the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# save(cps, file = \"cps_clean.rda\")\n```\n:::\n\n\n\n# Recreate Figure 1\n\nPhew, all that work, just to get set up to work. Now we can **have some fun.**\n\nLet's recreate a version of Figure 1 using the policy data from the `policy_data` data frame.\n\n## Write down aesthetic mappings from the figure:\n\nBefore we create this figure, think about the information conveyed by the figure's aesthetics (the x axis, the y axis, the color of the squares), and the corresponding columns from `policy_data` that contain this information.\n\n- x-axis: \n- y-axis: \n- col: \n\n## Create a variable called `SDR`\n\nIt will be helpful to have a variable called `SDR` in `policy_data` that takes the value of \"SDR\" when `sdr == 1` and \"non-SDR\" when `sdr == 0`\n\nPlease use `case_when()` or `ifelse()` to create `SDR` in `policy_data`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a variable called SDR in policy_data\n```\n:::\n\n\n## Recreate Figure 1\n\nRecall, we need three things to make a figure:\n\n- data\n- aesthetics\n- geometries\n\nUsing data from `policy_data` starting in 1978 (hint add a    `filter()`) and the aesthetic mappings identified above use `ggplot()` with the `geom_point()` geometry to make a version of Figure 1 from paper.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Recreate Figure 1\n```\n:::\n\n\n## Interpret Figure 1.\n\nPlease answer the following questions:\n\n- **How many states had Same Day Registration at some point in time?** XX states\n\n- **How many states had Same Day Registration in 2018?** XX states had SDR in 2018\n \n- **Did any states get rid of Same Day Registration? When did they get rid of this policy?** \n\n- **What's up with North Dakota?** \n\n\nUse this code chunk to write any code that might help you answer these questions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write code to help you answer the questions above (if needed)\n```\n:::\n\n\n# Recreate Figure 2\n\nFigure 2 shows the proportion of people voting by age group in states that did and did not have Same Day Registration. \n\nIf we take the average of a binary indicator like `dv_voted`, we get a proportion, which corresponds to what Grumbach and Hill call the `Pr(Voted)`\n\n## Calculate the proption voting by age group and SDR\n\nWith the `cps` data, use `group_by()` and summarize to calculate the proportion of people voting by age group in states that did and did not have same day registration in the code chunk below.\n\nSave the results to a new object called `fig2_df`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#  Calculate the proportion of voting by age group and SDR\n```\n:::\n\n\n## Recreate Figure 2\n\nUsing `fig2_df` recreate a Figure 2 from the paper:\n\n- filter out values of `age_group` that are `NA`\n- set the appropriate aesthetic mappings in `ggplot()`\n- use `geom_bar(stat = \"identity\", position = \"dodge\")`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Recreate Figure 2\n```\n:::\n\n\n## Interpret Figure 2\n\n**What does Figure 2 tell us?** Figure 2 provides ...\n\n# Take the Class Survey {.unnumbered}\n\nPlease take a few moments to complete the [class survey](https://brown.co1.qualtrics.com/jfe/form/SV_dgxOHQDv0xG1HzU){target=\"_blank\"} for this week.){target=\"_blank\"} for this week. This one's a banger.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/datatables-binding-0.32/datatables.js\"></script>\n<script src=\"../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}