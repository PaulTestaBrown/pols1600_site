{
  "hash": "c3398f2948669417adb77f406d073021",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Lab 01 - Exploring data on COVID-19 in the U.S.'\nauthor: \"Your Name HERE\"\ndate: \"Last Updated 2024-01-30\"\nformat:\n  html:\n    toc: true\n    toc-location: right\n    toc-float: true\n    toc-depth: 2\n    number-sections: true\n---\n\n\n\n\n# Overview {.unnumbered}\n\nToday, we'll continuing exploring the COVID-19 data for the U.S.\n\nWe covered a lot of ground in our last lecture. Conceptually, talked about how to\n\n-   Write and code in R Markdown\n-   Install and load packages\n-   Download and inspect data\n-   Clean and recode data\n-   Calculate simple descriptive statistics with that data\n\nTo do this, we copied and pasted a lot of code. Today, we'll **get practice writing our own code.** Specifically we will\n\n-   Repeat some steps from lecture to get our workspace and data set up\n-   Recode some additional variables\n-   Investigate what negative values mean for face mask policy\n-   Explore, in greater depth, tools for descriptive inference\n-   Revisit the question of face masks and new cases, *conditioning* on time.\n\n# Getting set up\n\n1.  Save this document in a folder for the class\n2.  Set your working director: Session \\> Set Working Directory \\> Source file location\n\n-   It's not vital today, but it's a good habit to develop.\n\n# Install the some additiona packages\n\n-   In the code chunk below, we'll use the `install.packages()` function to install the `lubridate` and `DT` package packages\n-   Uncomment the code by removing \\#\n-   Run the code \"Live\" by sending the command to your console\n-   Once `lubridate` is installed, comment the code out by placing a \\# at the start of the line\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(c(\"lubridate\",\"DT\"))\n```\n:::\n\n\nThe `'lubridate` package is a collection of functions that makes working with dates and time more simple.\n\nThe `DT` package allows us to display data tables in a searchable format in our html output.\n\n# Load the packages we'll be using today\n\n-   Create a code chunk\n-   Label your code chunk \"packages\"\n-   Use the `library()` to load the following packages\n    -   `tidyverse`\n    -   `COVID19`\n    -   `lubridate`\n    -   `DT`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(COVID19)\nlibrary(lubridate)\nlibrary(DT)\n```\n:::\n\n\n# Download the COVID19 Data for U.S.\n\nOpen up the [slides](https://pols1600.paultesta.org/slides/01-slides.html#81) from last class and copy and paste the relevant code into the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download the COVID-19 data\n\n# # Code below produces:\n# \n# covid <- COVID19::covid19(\n#   country = \"US\",\n#   start = \"2020-01-01\",\n#   end = \"2022-12-31\",\n#   level = 2,\n#   verbose = F\n# \n# )\n# \n# # Produces file saved here:\n\nload(url(\"https://pols1600.paultesta.org/files/data/covid.rda\"))\n```\n:::\n\n\n# Replicate the data cleaning and recoding from class\n\nSpecifically please do the following:\n\n1.  Create a object called `territories` that is a vector containing the names of U.S. territories\n\n-   Use `<-` and `c()` ([slides](https://pols1600.paultesta.org/slides/01-slides#107))\n\n2.  Create a new dataframe, called `covid_us`, by filtering out observations from the U.S. territories `- Use`\\<-`,`%\\>%`,`filter()`,`!`and`%in%\\` ([slides](https://pols1600.paultesta.org/slides/01-slides#108))\n3.  Create a `state` variable that is a copy of the `administrative_area_level_2`\n\n-   Use `%>%`, `mutate()` and `->`\n\n4.  Create a variable called `new_cases` from the `confirmed`. Create a variable called `new_cases_pc` that is the number of new Covid-19 cases per 100,000 citizens\n\n-   Use `%>%`,`group_by()`,`mutate()` and `lag()`, \\``/` and `*` ([slides](https://pols1600.paultesta.org/slides/01-slides#110))\n\n5.  Create a variable called `face_masks` from the `facial_coverings` variable. ([slides](https://pols1600.paultesta.org/slides/01-slides#111))\n\n-   Treat negative and positive values the same.\n-   Recode numeric values so that they have meaningful labels\n-   Save as a factor variable so that the labels are ordered in terms of increasing levels of severity/restrictions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ---- 1. Create territories object\n\nterritories <- c(\n  \"American Samoa\",\n  \"Guam\",\n  \"Northern Mariana Islands\",\n  \"Puerto Rico\",\n  \"Virgin Islands\"\n  )\n\n# ---- 2. Create covid_us data frame\n\ncovid_us <- covid %>%\n  filter(!administrative_area_level_2 %in% territories)\n\n# ---- 3-5. Recode variables in covid_us\n\ncovid_us %>%\n  mutate(\n    state = administrative_area_level_2,\n  ) %>%\n  dplyr::group_by(state) %>%\n  mutate(\n    new_cases = confirmed - lag(confirmed),\n    new_cases_pc = new_cases / population *100000\n    ) %>%\n  mutate(\n    face_masks = case_when(\n      facial_coverings == 0 ~ \"No policy\",\n      abs(facial_coverings) == 1 ~ \"Recommended\",\n      abs(facial_coverings) == 2 ~ \"Some requirements\",\n      abs(facial_coverings) == 3 ~ \"Required shared places\",\n      abs(facial_coverings) == 4 ~ \"Required all times\",\n    ) %>% factor(.,\n      levels = c(\"No policy\",\"Recommended\",\n                 \"Some requirements\",\n                 \"Required shared places\",\n                 \"Required all times\")\n    ) \n    ) -> covid_us\n```\n:::\n\n\nNext let's compare our new `face_mask` variable to the original `facial_coverings` variable using the table command.\n\nUncomment the following code and replace the generic terms `data`, `variable1`, and `variable2` with appropriate terms.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# table(data$variable1, data$variable2, useNA=\"ifany\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(covid_us$face_masks, covid_us$facial_coverings,useNA=\"ifany\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                        \n                            -4    -3    -2    -1     0     1     2     3     4\n  No policy                  0     0     0     0  3893     0     0     0     0\n  Recommended                0     0     0   275     0  8604     0     0     0\n  Some requirements          0     0  7362     0     0     0 17424     0     0\n  Required shared places     0  5897     0     0     0     0     0  9191     0\n  Required all times       410     0     0     0     0     0     0     0   622\n  <NA>                       0     0     0     0     0     0     0     0     0\n                        \n                          <NA>\n  No policy                  0\n  Recommended                0\n  Some requirements          0\n  Required shared places     0\n  Required all times         0\n  <NA>                   19850\n```\n\n\n:::\n:::\n\n\nYou've just created a \"crosstab\" a frequency table showing the joint distribution of two variables.\n\n::: blue\n> Crosstabs are powerful tools for getting a sense of your data and for checking whether a recode did what you wanted it to do.\n:::\n\nFinally, let's create a few more variables called `year_month` from the `date` variable and a variable describing the percent of a state's population that is fully vaccinated (`percent_vaccinated`), which we'll use later in the lab.\n\n## Uncomment and run the following code\n\nHighlight the commented code below from `# covid_us %>%` to `#   ) -> covid_us` and press `shift + cmd + C` on a mac or `shift + ctrl + C` on PC to uncomment the code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_us %>%\n  mutate(\n    year = year(date),\n    month = month(date),\n    year_month = paste(year, str_pad(month, width = 2, pad=0), sep = \"-\"),\n    percent_vaccinated = people_fully_vaccinated/population*100  \n    ) -> covid_us\n```\n:::\n\n\n-   The `year(date)` extracts the year from our `date` variable and saves it in new column called `year`\n-   Similarly, the `month(date)` extracts the month from our `date` variable and saves it in a new column called `month`\n-   Finally the `paste()` command pastes these two variables together, with the `str_pad()` adding a leading 0 to single digit months.\n-   To calculate the percent of states population that is fully vaccinated on a given date we divide the total number of fully vaccinated by the state's population and multiply by 100 to make it a percent.\n\n# Exploring our data\n\nFrom the [documentation](https://covid19datahub.io/articles/docs.html) of the COVID19 package, we see that the numeric values of the `facial_coverings` correspond to following substantive policy regimes:\n\n-   0 - No policy\n-   1 - Recommended\n-   2 - Required in some specified shared/public spaces outside the home with other people present, or some situations when social distancing not possible\n-   3 - Required in all shared/public spaces outside the home with other people present or all situations when social distancing not possible\n-   4 - Required outside the home at all times regardless of location or presence of other people\n\nThese data come from the [Oxford Covid-19 Government Response Tracker](https://github.com/OxCGRT/covid-policy-tracker). Oxford distinguishes between policies that are in effect for the entire administrative unit (e.g. the State of New York) and policies that may be in effect in only parts of the administrative unit (e.g. New York city)\n\n> In short: positive integers identify policies applied to the entire administrative area. Negative integers are used to identify policies that represent a best guess of the policy in force, but may not represent the real status of the given area. The negative sign is used solely to distinguish the two cases, it should not be treated as a real negative value.\n\nLet's get some practice using the `filter()`, `select()` `group_by()` and `summarize()`, and `n()` commands from `dplyr` package to understand how common each these negative values are in our data.\n\n## Uncomment and run the code below,\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_us %>%\n  filter(facial_coverings == -4) %>%\n  select(date, state) %>%\n  group_by(state) %>%\n  summarize(\n    n = n(),\n    earliest_date = min(date),\n    latest_date = max(date),\n  )%>%\n  arrange(earliest_date)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n  state              n earliest_date latest_date\n  <chr>          <int> <date>        <date>     \n1 Illinois         156 2020-10-01    2021-05-15 \n2 Massachusetts     35 2020-10-02    2020-11-05 \n3 South Carolina    61 2020-10-13    2020-12-12 \n4 Maryland         158 2020-11-06    2021-04-12 \n```\n\n\n:::\n:::\n\n\n## Please explain in words your best understanding of what each line of code is doing:\n\n-   `covid_us %>%` tells R that every line of code after will use `covid_us` dataframe\n-   `filter(facial_coverings == -4) %>%` tells R to filter out only the rows where the facial coverings variable equals -4\n-   `select(date, state) %>%` tells R to select the columns named `date` and `state`\n-   `group_by(state) %>%` tells R that subsequent commands should be done separately for each unique value of `state`\n-   `summarize(` tells R we want to summarize the output of susequent commands\n-   `n = n(),` tells R to count the number of observations (state-dates) for each state that had a value of -4 on the `facial_coverings` variable\n-   `earliest_date = min(date),` tells R to report the earliest date that each state had a value of -4\n-   `latest_date = max(date),` tells R to report the last date that each state had a value of -4\n-   `)%>%` tells R we're finished with the `summarize()` function\n-   `arrange(earliest_date)` arranges the data in asscending order from earliest to latest start date\n\nYou may find this [cheatsheet](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf) useful and you can find a more detailed discussion [here](https://r4ds.had.co.nz/transform.html)\n\nSubstantively, what does the previous chunk of code tell us?\n\n-   So there are five states that had -4 on the facial covering variable: Illinois, Maryland, Massachusetts, Montana, and South Carolina. Illinois was the first state where this code appears, and it appears present in 156 observations while Montana was the last adopting a policy code -4 on March 25, 2021\n\n::: blue\n> Filtering data, selecting specific variables, and summarizing variables are important skills that let us \"know our data\"\n:::\n\n# Look at the source data for face mask policies\n\nTo make sure we understand what this policy variable `facial_coverings` is measuring, let's download the source data from Oxford\n\n\n::: {.cell}\n\n```{.r .cell-code}\noxford_us <- read_csv(\"https://github.com/OxCGRT/USA-covid-policy/raw/master/data/OxCGRT_US_latest.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 56992 Columns: 81\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (32): CountryName, CountryCode, RegionName, RegionCode, Jurisdiction, C1...\ndbl (48): Date, C1_School closing, C1_Flag, C2_Workplace closing, C2_Flag, C...\nlgl  (1): M1_Wildcard\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nNow let's look at the policy on face masks for Illinois. From Oxford's [codebook](https://github.com/OxCGRT/covid-policy-tracker/blob/master/documentation/codebook.md), we learn that variables describing face mask policies all begin with the prefix `H6_`\n\n::: blue\n> Using common prefixes for a variable is a good habit that will help you organize and work with your data\n:::\n\n## Please run the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\noxford_us %>%\n  mutate(\n    date = ymd(Date)\n  )%>%\n  filter(RegionName == \"Illinois\", \n         date > \"2020-08-01\", \n         date < \"2021-01-01\",\n         !is.na(H6_Notes)) %>%\n  select(date,starts_with(\"H6_\")) -> il_facemasks\nil_facemasks\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 4\n  date       `H6_Facial Coverings` H6_Flag H6_Notes                             \n  <date>                     <dbl>   <dbl> <chr>                                \n1 2020-08-21                     2       1 \"In Executive Order 2020-52, Executi…\n2 2020-08-26                     2       1 \"Effective from 26 August 2020, the …\n3 2020-09-18                     2       1 \"On 18 September, in Executive Order…\n4 2020-10-01                     4       0 \"Originally coded a 3T, but looking …\n5 2020-10-16                     4       0 \"In Executive Order (EO) 2020-59, Go…\n6 2020-11-13                     4       0 \"Noting that Executive Order 2020-71…\n7 2020-11-20                     4       0 \"Executive Order 2020-73 requires pe…\n8 2020-12-01                     3       1 \"Chicago seems to have changed its g…\n```\n\n\n:::\n:::\n\n\n## Again, explain in words, what the components of this code are doing:\n\n-   `oxford_us %>%` Tells R to use the Oxford policy data\n-   `mutate(date = ymd(Date))%>%` Creates a `date` variable of class `date` from the original `Date` variable (which was class `numeric`)\n-   `filter(RegionName == \"Illinois\",` subsets the data to just Illinois\n-   `date > \"2020-08-01\",` filters out dates before August 1, 2020\n-   `date < \"2021-01-01\",` filters out observations with dates after January 1,2021\n-   `!is.na(H6_Notes)) %>%` filters out observations without notes (which appear in the data when policy changes)\n-   `select(date,starts_with(\"H6_\")) -> il_facemasks` Selects just the date and notes variables and saves them to an object called `il_facemasks`\n-   `il_facemasks` prints the obejct in the console\n\nLet's take a look at the `H6_Notes` variable for 2020-09-18\n\n\n::: {.cell}\n\n```{.r .cell-code}\nil_facemasks$H6_Notes[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"On 18 September, in Executive Order 2020-55, the Governor reissued most executive orders, extending a majority of the provisions through 17 October 2020. This includes mask requirements.      https://web.archive.org/web/20200922144918/https://www2.illinois.gov/Pages/Executive-Orders/ExecutiveOrder2020-55.aspx\"\n```\n\n\n:::\n:::\n\n\nNow update the code to select `H6_Notes` variable for 2020-10-01\n\n\n::: {.cell}\n\n```{.r .cell-code}\nil_facemasks$H6_Notes[il_facemasks$date == \"2020-10-01\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Originally coded a 3T, but looking at the below description, which includes even residential buildings, it is hard to conceive of a time outside the home when a Chicago resident would not be required to wear a mask. The Phase IV \\\"Gradually Resume\\\" guidelines seem not to provide any significant exemption (https://archive.fo/dOyY9). Hence code moves up to 4T.    Effective October 1, 2020, residents of Chicago are required to wear masks in all public places.     “Any individual who is over age two and able to medically tolerate a mask shall be required to wear a mask when in a public place, which for purposes of this Order includes any common or shared space in: (1) a residential multi-unit building or (2) any non-residential building, unless otherwise provided for in the Phase IV: Gradually Resume guidelines promulgated by the Office of the Mayor (\\\"Gradually Resume Guidelines\\\")”    Additionally, but separately, “Individuals must, at all times and as much as reasonably possible, maintain Social Distancing from any other person who does not live with them.”    https://web.archive.org/web/20201116163255/https://www.chicago.gov/content/dam/city/sites/covid/health-orders/CDPH%20Order%202020-9%20-%205th%20Amended%20FINAL%209.30.20_AAsigned.pdf\"\n```\n\n\n:::\n:::\n\n\n## What have we learned about our variables measuring `face_mask` policy\n\nIn Illinois, the -4's seem to correspond to more stringent mask policies implemented in Chicago relative to the rest of the state. So by collapsing negative and positive values of `facial_coverings` to construct our `face_mask` variable, we're probably over stating the extent the extensiveness of policies in effect.\n\nSo we should be cautious in how we interpret our collapsed variable, `face_mask`. Perhaps we could construct another variable that distinguished state-level policies from more localized policies, or we could only look at cases where there was a uniform state policy.\n\n# Explore R's functions for generating summary statistics\n\nIn class, we kind of rushed through our discussion of descriptive statistics. Let's take a little time to review these concepts in more detail and see how to calculate them in R.\n\n## Measures of Central Tendency\n\nMeasures of central tendency describe what a typical value of some variable. In this course, we'll use three measures of what's typical:\n\n-   mean\n-   median\n-   mode\n\n### Mean\n\nOne of the most frequent measures of central tendency we'll use in this course is a mean or average.\n\nSuppose we have $n$ observations of some variable $x$. We can calculate the mean of $\\bar{x}$ (\"x bar), by adding up all the values of x\n\n\\[ \\bar{x}=\\frac{1}{n}\\sum\\_{i=1}\\^n x_i \\]\n\nWe'll see later in the course that means are closely related to the concept of expected values in probability and that conditional means (which we'll calculate below) are central to thinking about linear regression.\n\nFor now, please calculate the mean (average) number of new cases per 100,000 residents in our data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(covid_us$new_cases_pc, na.rm=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 28.11486\n```\n\n\n:::\n:::\n\n\nLast class, when we calculated the the average number of new cases under each type of face mask policy, we were calculating a **conditional mean** the mean of some variable, conditional on some other variable taking a specific value.\n\nFormally, you'll often see this written in terms of **Expected Values**: Something like\n\n\\[ E\\[Y\\|X=x\\] \\]\n\nOr to make it more concrete:\n\n\\[ E\\[\\text{New Cases} \\| \\text{Policy = \"recommended\"}\\] \\]\n\nIn code, we could accomplish this manually, using the index operator:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(covid_us$new_cases_pc[covid_us$face_masks == \"No policy\"], na.rm=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10.26168\n```\n\n\n:::\n:::\n\n\n#### How would we calculate the conditional mean of `new_cases_pc` when `face_masks` equals \"Recommend\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(covid_us$new_cases_pc[covid_us$face_masks == \"Recommended\"], na.rm=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16.61408\n```\n\n\n:::\n:::\n\n\nBy using `group_by()` with `summarise()` we can accomplish this more quickly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_us%>%\n  group_by(face_masks)%>%\n  summarise(\n    new_cases_pc = mean(new_cases_pc, na.rm=T)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  face_masks             new_cases_pc\n  <fct>                         <dbl>\n1 No policy                      10.3\n2 Recommended                    16.6\n3 Some requirements              36.2\n4 Required shared places         29.4\n5 Required all times             32.2\n6 <NA>                           11.8\n```\n\n\n:::\n:::\n\n\n### Median\n\nThe median is another measure of what's typical for variables that take numeric values\n\nImagine, we took our data new Covid-19 cases and arranged them in ascending order, from the smallest value to highest value\n\nThe median would be the value in the exact middle of that sequence, also known as the 50th percentile.[^1]\n\n[^1]: It's a little more complicated as we need to decide how to handle situations where their are ties, or an even number of cases. For now we'll just accept the default rules `R` uses.\n\nFormally, we can define that median as:\n\n\\[ M_x = X_i : \\int*{-*\\infty}\\^{x_i} f_x(X)dx=\\int{x_i}\\^\\infty f_x(X)dx=1/2 \\]\n\nWhich might look like Greek to you, which is fine. Just think of it as the middle value.\n\n#### Please calculate the median number of new Covid-19 cases per 100,000 using the `median()` function. How does it compare to the mean?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian(covid_us$new_cases_pc, na.rm=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10.52355\n```\n\n\n:::\n:::\n\n\nInteresting the median is much lower than the mean. If we were to look at a histogram of our data (more on that next week; think of it as a graphical representation of a frequency table), we see that the `new_cases_pc` has a \"long tail\" or is skewed to the right. Most of the values are close to 0, but there are few cases that are extreme outliers.\n\n::: blue\n> Medians are less influenced by outliers than means\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(covid_us$new_cases_pc, breaks = 100)\n```\n\n::: {.cell-output-display}\n![](01-lab-comments_files/figure-html/hist-1.png){width=672}\n:::\n:::\n\n\n### Modes\n\nConceptually, a mode describes the most frequent outcome.\n\nModes are useful for describing what's typical of \"nominal\" or categorical data like our measure of face mask policy.\n\nTo calculate the mode of our `face_masks` variable, wrap the output of `table()` with the `sort()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort(table(covid_us$face_masks))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n    Required all times              No policy            Recommended \n                  1032                   3893                   8879 \nRequired shared places      Some requirements \n                 15088                  24786 \n```\n\n\n:::\n:::\n\n\nFor numeric data, modes correspond to the peak of a variable's density function (more on this later in the class).\n\nYou can get a sense of the relationship between, means, median's and modes from this helpful figure from [Wikipedia](https://en.wikipedia.org/wiki/Mode_(statistics)):\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/3/33/Visualisation_mode_median_mean.svg/240px-Visualisation_mode_median_mean.svg.png)\n\n## Measures of Dispersion\n\nMeasures of dispersion describe how much the data \"vary.\" Let's discuss the following ways we can summarize how our data vary:\n\n-   range\n-   percentile range\n-   variance\n-   standard deviation\n\n### Range\n\nThe range of a variable is simply it's minimum and maximum value\n\n#### Please calculate the range of our `new_cases_pc` using the `range()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrange(covid_us$new_cases_pc,na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -275.6916 1531.8669\n```\n\n\n:::\n\n```{.r .cell-code}\nmin(covid_us$new_cases_pc,na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -275.6916\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(covid_us$new_cases_pc,na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1531.867\n```\n\n\n:::\n:::\n\n\n#### What states on what dates observed these minimum and maximum values?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_us %>%\n  filter(\n    new_cases_pc < -188 |\n    new_cases_pc > 1500\n  )%>%\n  select(state, date,new_cases_pc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n# Groups:   state [5]\n  state        date       new_cases_pc\n  <chr>        <date>            <dbl>\n1 Florida      2021-06-04        -189.\n2 Rhode Island 2022-01-04        1532.\n3 Tennessee    2023-01-01        -267.\n4 Nebraska     2022-10-28        -276.\n5 Kentucky     2022-10-11        -198.\n```\n\n\n:::\n:::\n\n\n### Percentiles Ranges\n\nThe $p$-th percentile is the value of the observation such that 100\\*p percent of the data are to the left and 100-100\\*p are two the right.\n\n\\[ p_x = X_i : \\int*{-*\\infty}\\^{x_i} f_x(X)dx= p; \\int{x_i}\\^\\infty f_x(X)dx=1-p \\]\n\nThe median is just the 50th percentile\n\nIn R we calculate the $p$-th percentile using the `quantile()` setting the `probs` argument to the $p/100$ percentile that we we want.\n\n#### Please use the `quantile()` function to calculate the 25th and 75th percentiles of the `new_cases_pc` variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(covid_us$new_cases_pc, probs = c(.25,.75), na.rm=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     25%      75% \n 0.00000 32.14152 \n```\n\n\n:::\n:::\n\n\nThe 25th and 75th percentile define the \"Interquartile Range\" where 50 percent of the observations lie within this range, and 50 percent lie outside the range.\n\n### Variance\n\nVariance describes how much observations of a given measure vary around that measure's mean.\n\nThe variance in a given sample is calculated by taking the average of the sum of squared deviations (i.e. differences) around a measure's mean.\n\n\\[ \\sigma\\^2_x=\\frac{1}{n-1}\\sum\\_{i=1}^n(x_i-^\\bar{x})2 \\]\n\n-   $x_i-\\bar{x}$ is the deviation of each observation from the overall mean\n-   $(x_i-\\bar{x})^2}$ squaring this ensures that we treat positive and negative deviations the same when calculating the overall variance\n-   $\\sum_{i=1}$ sums up all the differences\n-   $\\frac{1}{n-1}$ is like taking the average of these differences (we divide by $n-1$ instead of $n$ for [statistical reasons](https://web.ma.utexas.edu/users/mks/M358KInstr/SampleSDPf.pdf) that we'll return two when we talk about estimation)\n\nUse the `var()` function to calculate the variance of the `new_cases_pc` variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(covid_us$new_cases_pc,na.rm=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3402.718\n```\n\n\n:::\n\n```{.r .cell-code}\n# Calculate by hand\n\nsum(\n  (covid_us$new_cases_pc - mean(covid_us$new_cases_pc,na.rm=T))^2, \n  na.rm=T\n  )/(sum(!is.na(covid_us$new_cases_pc))-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3402.718\n```\n\n\n:::\n:::\n\n\nVariance will be important for thinking about uncertainty and inference (e.g. how might our estimate have been different)\n\n### Standard Deviations\n\nA standard deviation is simply the square root of variable's variance.\n\n\\[ \\sigma\\_x=\\sqrt{\\sigma^2_x}=\\sqrt{\\frac{1}{n-1}\\sum_{i=1}^n(x_i-\\bar{x})^2} \\]\n\nStandard deviations are easier to interpet because their units are the same as variable.\n\nThink of them as a measure of the typical amount of variation for variable.\n\nAgain, let's use the `sd()` function to calculate the standard deviation of the `new_cases_pc` variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(covid_us$new_cases_pc,na.rm=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 58.33282\n```\n\n\n:::\n:::\n\n\n## Measures of Association\n\nMeasures of association describe how variables relate to each other.\n\n### Covariance\n\nCovariance describes how two variables \"co-vary\".\n\nWhen $x$ is above its mean, $y$ also tends to be above it's mean, these variables have a positive covariance.\n\nIf when $x$ tends to be high, $y$ tends to be low, these variables have a negative variance\n\nFormally, the sample[^2] covariance of two variables can written as follows:\n\n[^2]: Astute readers might ask, why are you talking about samples? We'll come back to this later in the course when we talk about probability, estimation and statistical inference.\n\n\\[ cov(x,y)=\\frac{1}{n-1}\\sum\\_{i=1}\\^n(x_i-\\bar{x})(y_i-\\bar{y}) \\]\n\n#### Please calculate the covariance between the percent of state's population that is fully vaccinated (`percent_vaccinated`) and `new_cases_pc` using the `var()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(covid_us$new_cases_pc,covid_us$percent_vaccinated,na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -19.96569\n```\n\n\n:::\n:::\n\n\n### Correlation\n\nLike variances, covariances don't really have intrinsic meaning, since x and y can be measured on very different scales.\n\nThe correlation between two variables takes their covariance and scales this by the standard deviation of each variable, creating a measure that can range from -1 (perfect negative correlation) to 1 perfect positive correlation.\n\nAgain, we can write this formally\n\n\\[ \\rho\\_{x,y} = \\frac{cov(x_y)}{\\sigma_x,\\sigma_y} \\]\n\nBut don't sweat the formulas too much. I'm just contractually obligated to show you math.\n\n#### Calculate the correlation between the percent of state's population that is fully vaccinated (`percent_vaccinated`) and `new_cases_pc` using the `cor()` function.\n\nYou'll need to set the argument `use=\"complete.obs`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(covid_us$percent_vaccinated, covid_us$new_cases_pc, use = \"complete.obs\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.01369243\n```\n\n\n:::\n:::\n\n\nHmm... That seems a little strange. What if we calculated the correlation between vaccination rates and new cases separately for each month in 2021\n\n#### Uncomment and interpret the output of the code below\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_us %>%\n  filter(year > 2020)%>%\n  ungroup() %>%\n  group_by(year,month)%>%\n  summarise(\n    mn_per_vax = mean(percent_vaccinated, na.rm=T),\n    cor = cor(new_cases_pc, percent_vaccinated, use = \"complete.obs\")\n  )\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `summarise()`:\nℹ In argument: `cor = cor(new_cases_pc, percent_vaccinated, use =\n  \"complete.obs\")`.\nℹ In group 28: `year = 2023` and `month = 4`.\nCaused by error in `cor()`:\n! no complete element pairs\n```\n\n\n:::\n:::\n\n\n# Facemasks and New Cases of Covid-19\n\nLet's return to the question of the average number of new Covid-19 cases (per 100,000) for different types of face mask policies.\n\nWe ended our previous class with this result:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_us %>%\n  filter(!is.na(face_masks))%>%\n  group_by(face_masks)%>%\n  summarize(\n    new_cases_pc = round(mean(new_cases_pc, na.rm=T),2)\n  ) -> face_mask_summary\nface_mask_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  face_masks             new_cases_pc\n  <fct>                         <dbl>\n1 No policy                      10.3\n2 Recommended                    16.6\n3 Some requirements              36.2\n4 Required shared places         29.4\n5 Required all times             32.2\n```\n\n\n:::\n:::\n\n\n## What do these averages really tell us?\n\nProbably not that much. Different Face mask policies are implemented at different times in the pandemic. For example, by 2021, almost all states have some requirements. Comparing the average for new cases in states with no policy to states with full requirements, is comparing the state of world in early 2020 to the state of the world in late 2020 to mid 2021. But lots of things differ between these periods. Other policies are also going into effect, new variants are emerging.\n\nIn short, those simple conditional means across the full data don't really provide an apples to apples comparison.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_us%>%\n  group_by(date,face_masks)%>%\n  summarise(\n    n = n()\n  )%>%\n  filter(date >= \"2020-03-01\")%>%\n  ggplot(aes(date,n,fill=face_masks))+\n  geom_bar(stat=\"identity\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'date'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-lab-comments_files/figure-html/fmplots-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncovid_us%>%\n  group_by(date,face_masks)%>%\n  summarise(\n    new_cases = sum(new_cases)\n  )%>%\n  filter(date >= \"2020-03-01\")%>%\n  ggplot(aes(date,new_cases))+\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'date'. You can override using the\n`.groups` argument.\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 328 rows containing non-finite values (`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-lab-comments_files/figure-html/fmplots-2.png){width=672}\n:::\n:::\n\n\n## Add another filter to the code above to caluclate the conditional means for just 1 month in a particular year in the data\n\nIf we limit our comparison to a more narrow time period, say one month in one year, we're making a fairer comparison between states that are likely facing more similar conditions/challenges.\n\nSo when we compare states in September 2020, we see that rates of new cases tend to be much higher in states with only recommend face mask policies compared to states with at least some requirements.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_us %>%\n  filter(!is.na(face_masks))%>%\n  filter(year_month == \"2020-09\")%>%\n  group_by(face_masks) %>%\n  summarise(\n    new_cases_pc = mean(new_cases_pc,na.rm=T)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  face_masks             new_cases_pc\n  <fct>                         <dbl>\n1 Recommended                    43.9\n2 Some requirements              13.5\n3 Required shared places         13.0\n4 Required all times             10.1\n```\n\n\n:::\n:::\n\n\n### Add another arguement to the group_by() command from the original code to calcutate the conditional means by face mask policy for each month in each year of the data\n\n-   Save the output of summarize into an object called `cases_by_month_and_policy`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_us %>%\n  filter(!is.na(face_masks))%>%\n  group_by(year_month,face_masks) %>%\n  summarise(\n    n = length(unique(state)),\n    new_cases_pc = round(mean(new_cases_pc,na.rm=T)),\n    total_cases = round(mean(confirmed,na.rm=T))\n  ) -> cases_by_month_and_policy\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'year_month'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n:::\n\n\n### Uncomment the code below to display `cases_by_month_and_policy` in a searchable table\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDT::datatable(cases_by_month_and_policy,\n              filter = \"top\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-a41376d848793345d227\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-a41376d848793345d227\">{\"x\":{\"filter\":\"top\",\"vertical\":false,\"filterHTML\":\"<tr>\\n  <td><\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"factor\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"width: 100%; display: none;\\\">\\n      <select multiple=\\\"multiple\\\" style=\\\"width: 100%;\\\" data-options=\\\"[&quot;No policy&quot;,&quot;Recommended&quot;,&quot;Some requirements&quot;,&quot;Required shared places&quot;,&quot;Required all times&quot;]\\\"><\\/select>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"integer\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"1\\\" data-max=\\\"51\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"204\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"1\\\" data-max=\\\"2801453\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n<\\/tr>\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\",\"101\",\"102\"],[\"2020-01\",\"2020-02\",\"2020-03\",\"2020-03\",\"2020-04\",\"2020-04\",\"2020-04\",\"2020-04\",\"2020-05\",\"2020-05\",\"2020-05\",\"2020-06\",\"2020-06\",\"2020-06\",\"2020-06\",\"2020-07\",\"2020-07\",\"2020-07\",\"2020-07\",\"2020-08\",\"2020-08\",\"2020-08\",\"2020-08\",\"2020-09\",\"2020-09\",\"2020-09\",\"2020-09\",\"2020-10\",\"2020-10\",\"2020-10\",\"2020-10\",\"2020-11\",\"2020-11\",\"2020-11\",\"2020-12\",\"2020-12\",\"2020-12\",\"2021-01\",\"2021-01\",\"2021-01\",\"2021-02\",\"2021-02\",\"2021-02\",\"2021-03\",\"2021-03\",\"2021-03\",\"2021-04\",\"2021-04\",\"2021-04\",\"2021-05\",\"2021-05\",\"2021-05\",\"2021-06\",\"2021-06\",\"2021-07\",\"2021-07\",\"2021-08\",\"2021-08\",\"2021-09\",\"2021-09\",\"2021-10\",\"2021-10\",\"2021-11\",\"2021-11\",\"2021-12\",\"2021-12\",\"2022-01\",\"2022-01\",\"2022-02\",\"2022-02\",\"2022-03\",\"2022-03\",\"2022-04\",\"2022-04\",\"2022-04\",\"2022-04\",\"2022-05\",\"2022-05\",\"2022-05\",\"2022-06\",\"2022-06\",\"2022-06\",\"2022-07\",\"2022-07\",\"2022-07\",\"2022-08\",\"2022-08\",\"2022-08\",\"2022-08\",\"2022-09\",\"2022-09\",\"2022-09\",\"2022-09\",\"2022-10\",\"2022-10\",\"2022-10\",\"2022-11\",\"2022-11\",\"2022-11\",\"2022-12\",\"2022-12\",\"2022-12\"],[\"No policy\",\"No policy\",\"No policy\",\"Recommended\",\"No policy\",\"Recommended\",\"Some requirements\",\"Required shared places\",\"Recommended\",\"Some requirements\",\"Required shared places\",\"Recommended\",\"Some requirements\",\"Required shared places\",\"Required all times\",\"Recommended\",\"Some requirements\",\"Required shared places\",\"Required all times\",\"Recommended\",\"Some requirements\",\"Required shared places\",\"Required all times\",\"Recommended\",\"Some requirements\",\"Required shared places\",\"Required all times\",\"Recommended\",\"Some requirements\",\"Required shared places\",\"Required all times\",\"Some requirements\",\"Required shared places\",\"Required all times\",\"Some requirements\",\"Required shared places\",\"Required all times\",\"Some requirements\",\"Required shared places\",\"Required all times\",\"Some requirements\",\"Required shared places\",\"Required all times\",\"Some requirements\",\"Required shared places\",\"Required all times\",\"Some requirements\",\"Required shared places\",\"Required all times\",\"Some requirements\",\"Required shared places\",\"Required all times\",\"Some requirements\",\"Required shared places\",\"Some requirements\",\"Required shared places\",\"Some requirements\",\"Required shared places\",\"Some requirements\",\"Required shared places\",\"Some requirements\",\"Required shared places\",\"Some requirements\",\"Required shared places\",\"Some requirements\",\"Required shared places\",\"Some requirements\",\"Required shared places\",\"Some requirements\",\"Required shared places\",\"Some requirements\",\"Required shared places\",\"No policy\",\"Recommended\",\"Some requirements\",\"Required shared places\",\"No policy\",\"Recommended\",\"Some requirements\",\"No policy\",\"Recommended\",\"Some requirements\",\"No policy\",\"Recommended\",\"Some requirements\",\"No policy\",\"Recommended\",\"Some requirements\",\"Required shared places\",\"No policy\",\"Recommended\",\"Some requirements\",\"Required shared places\",\"No policy\",\"Recommended\",\"Some requirements\",\"No policy\",\"Recommended\",\"Some requirements\",\"No policy\",\"Recommended\",\"Some requirements\"],[18,25,51,1,48,51,11,8,29,21,12,23,22,21,1,11,20,37,2,2,10,38,2,1,10,38,2,1,9,39,5,11,42,7,8,41,5,8,40,4,8,42,5,10,40,3,22,41,3,36,31,1,42,15,45,11,45,11,44,10,43,11,45,9,45,6,48,4,49,3,50,3,3,23,50,2,4,24,28,5,25,28,6,27,26,5,24,25,1,6,27,23,1,8,27,20,8,28,18,7,27,17],[0,0,2,1,7,7,17,13,6,7,10,7,5,11,14,15,7,19,12,25,10,13,10,44,13,13,10,74,29,24,19,77,53,44,65,60,57,47,53,62,21,24,26,15,18,19,17,19,25,9,9,16,4,5,12,12,40,37,46,53,30,38,32,37,57,71,194,204,50,30,11,11,20,12,12,11,20,21,31,38,29,32,36,32,31,36,30,26,36,19,18,18,12,9,9,14,11,13,14,15,17,17],[1,4,842,348,2942,8006,27091,58707,12505,30858,64638,19790,42717,73226,60672,41358,41813,85438,98688,73143,59039,115950,137021,16557,86019,142033,170405,26578,84649,170984,221737,155452,223116,281535,255962,349812,281652,332179,491782,377101,412753,557729,602798,423425,599913,739992,430008,664232,890493,541691,752083,1355923,659390,626556,693436,562391,784361,371074,854154,604613,906163,734194,928863,881384,988937,1009735,1283303,1227360,1523330,1313503,1547637,1555169,1269700,1650906,1544686,1961594,1606979,1716974,1523006,2490400,1542604,1670034,2053536,1511958,1888276,2103405,1476507,2012202,2735034,1998500,1666809,1973626,2801453,1640805,1940118,1886662,1655120,2119028,1665828,1804930,1885126,2048465]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>year_month<\\/th>\\n      <th>face_masks<\\/th>\\n      <th>n<\\/th>\\n      <th>new_cases_pc<\\/th>\\n      <th>total_cases<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[3,4,5]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"year_month\",\"targets\":1},{\"name\":\"face_masks\",\"targets\":2},{\"name\":\"n\",\"targets\":3},{\"name\":\"new_cases_pc\",\"targets\":4},{\"name\":\"total_cases\",\"targets\":5}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"orderCellsTop\":true}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n### Uncomment the code below to visualize this `cases_by_month_and_policy`\n\nWhat does this figure tell us?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncases_by_month_and_policy %>%\n  ggplot(aes(\n    x= year_month,\n    y = new_cases_pc,\n    col=face_masks))+\n  geom_point()+\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](01-lab-comments_files/figure-html/fmfig-1.png){width=672}\n:::\n:::\n\n\nSo this figure graphically displays the data `cases_by_month_and_policy`\n\nFrom about August 2020 to October 2020 states with facemask requirements saw much lower rates of new cases than states that only recommended face masks.\n\nAfter October 2020, every state has at least some requirement, and the differences between the stringency of requirements is a little harder to see.\n\nAgain this stuff is complicated. Lots of things are changing and these month comparisons are by no means perfect. Lot's of things differ between states with different mask policies. What we'd really like to know is a sort of counterfactual comparison between the number new cases in a state with a given policy and what those new cases would have been had that state had a different policy.\n\nThe problem is, we don't get to see that counterfactual outcome. So how can we make causal claims about the effects of facemasks, or any other policy that interests us? Finding creative ways to answer these questions is the key to making credible causal claims.\n\nNext week, we'll explore how to make this figure and many more from our data\n\n# Summary\n\nLike lecture, we covered a lot in this first lab. Specifically we:\n\n-   Practiced installing packages and setting up our workspace\n-   Downloaded multiple data sets\n-   Saw how we could use functions to transform and explore data. Specifically we used:\n    -   `%>%`, the pipe command, to chain together multiple functions\n    -   `filter()` to filter data based on logical comparisons\n    -   `select()` to select specific variables from our data\n    -   `group_by()` to apply functions by one or more grouping variables\n    -   `mutate()` to create new columns in our data\n    -   `summarise()` to summarize the output of functions, often by groups\n    -   `arrange()` to sort data by a specific variable\n-   Explored different tools of descriptive inference using:\n    -   `means`, `medians` and `modes` to describe typical values of data\n    -   `ranges`, `percentile ranges`, `variances` and `standard deviations` to describe how our data vary\n    -   `covariances` and `correlations` to describe relationships between variables in our data\n-   Explored how the relationships between face masks and Covid-19 changed when we *conditioned* on time and looked within months as opposed to accross the whole data set.\n\nNot all of this will make sense the first time through. That's OK. The things we've done today, we will do again and again over the course of the semester. Overtime, concepts that seemed crazy or confusing, we'll become second nature.\n\nAfter class, on the course website and canvas, you'll find my \"commented\" solutions today's lab.\n\nIf there are particular parts of the lab where we went too fast, or things didn't make sense. Take a moment to review these notes. Try re-running the code. Changing the code. Break the code and see if you can fix it.\n\nWhen you encounter a problem you can solve, send me an email, or ask your friends, or doctor Google. I guarantee you, someone else has had a similar question or problem.\n\nThe only dumb question in this course is a question you don't ask!\n\nPlease upload the html file produced by your .Rmd file to [Canvas](https://canvas.brown.edu/courses/1094972/assignments)\n\nFinally, please take a moment to complete this weeks [class survey](https://brown.co1.qualtrics.com/jfe/form/SV_bPGJjZUbZ55PR2K)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/datatables-binding-0.31/datatables.js\"></script>\n<script src=\"../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"../site_libs/nouislider-7.0.10/jquery.nouislider.min.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/nouislider-7.0.10/jquery.nouislider.min.js\"></script>\n<link href=\"../site_libs/selectize-0.12.0/selectize.bootstrap3.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/selectize-0.12.0/selectize.min.js\"></script>\n<link href=\"../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}