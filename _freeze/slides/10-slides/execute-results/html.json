{
  "hash": "d5a1e2c164c248a4373561a7eb104ba7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"POLS 1600\"\nsubtitle: \"Quantifying uncertainty:<br> Confidence Intervals &<br>Hypothesis Tests\"\ndate: last-modified\ndate-format: \"[Updated ]MMM D, YYYY\"\nformat: \n  revealjs:\n    theme: brownslides.scss\n    logo: images/pols1600_hex.png\n    footer: \"POLS 1600\"\n    multiplex: false\n    transition: fade\n    slide-number: c\n    incremental: true\n    center: false\n    menu: true\n    scrollable: true\n    highlight-style: github\n    progress: true\n    code-overflow: wrap\n    chalkboard: true\n    # include-after-body: title-slide.html\n    title-slide-attributes:\n      align: left\n      data-background-image: images/pols1600_hex.png\n      data-background-position: 90% 50%\n      data-background-size: 40%\nfilters:\n  - openlinksinnewpage\nexecute: \n  eval: false\n  echo: true\n  warning: false\n  message: false\n  cache: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# {{< fa map-location>}} Overview {.inverse}\n\n## Class Plan\n\n- Announcements\n- Feedback\n- Review\n\n\n\n## Annoucements\n\n## Feedback\n\n## {{< fa lightbulb >}}  Concepts \n\n## {{< fa code>}} Code   \n\n# {{< fa magnifying-glass>}} Review {.inverse}\n\n## Review\n\n# {{< fa lightbulb >}} Confidence Intervals {.inverse}\n\n\n## Confidence Intervals{.smaller}\n\n- Confidence intervals provide a way of [quantifying uncertainty]{.blue} about [estimates]{.blue}\n\n- Confidence intervals describe a [range of plausible values]{.blue} for an estimate\n\n- That range is a function of the [standard error]{.blue} of the estimate, and the a [critical value]{.blue} determined by $\\alpha$, which describes the degree of confidence we want \n  \n  - A 95% confidence interval corresponds to an $\\alpha$ of 0.05\n\n- A [standard error]{.blue} is the standard deviation of a theoretical [sampling distribution]{.blue} of our estimate\n\n- We can obtain the sampling distribution via:\n\n  - [simulation]{.blue} (bootstrapping)\n  - [asymptotic theory]{.blue} (the CLT)\n\n- Our confidence [is about the interval]{.blue}, not the specific value of the estimate.\n\n## Populations and Samples{.smaller}\n\n\n- [Population]{.blue}: All the cases from which you could have sampled\n\n- [Parameter:]{.blue} A quantity or quantities of interest often generically called $\\theta$ (\"theta\"). Something we'd like to know about our population\n\n- [Sample:]{.blue} A (random) draw from that population\n\n- [Sample Size:]{.blue} The number of observations in your draw (without replacement)\n\n## Estimators, Estimates, and Statistics{.smaller}\n\n- [Estimator:]{.blue} A rule for calculating an *estimate* of our parameter of interest. \n\n- [Estimate:]{.blue} The value produced by some estimator for some parameter from some data. Often called $\\hat{\\theta}$ \n\n- [Unbiased estimators:]{.blue} $E(\\hat{\\theta})=E(\\theta)$ On average, the estimates produced by some estimator will be centered around the truth\n\n- [Consistent estimates:]{.blue} $\\lim_{n\\to \\infty} \\hat{\\theta_N} = \\theta$ As the sample size increases, the estimates from an estimator converge in probability to the parameter value\n\n- [Statistic:]{.blue} A summary of the data (mean, regression coefficient, $R^2$). An estimator without a specified target of inference \n\n## Distrubtions and Standard Errors{.smaller}\n\n- [Sampling Distribution:]{.blue} How some estimate would vary if you took [repeated samples]{.blue} from the population\n\n- [Standard Error:]{.blue} The standard deviation of the sampling distribution\n\n- [Resampling Distribution:]{.blue} How some estimate would vary if you took repeated samples [from your sample WITH REPLACEMENT]{.blue} \n    - \"Sampling from our sample, as the sample was sampled from the population.\"\n    \n## Confidence Intervals: Interpretation{.smaller}\n\n- Confidence intervals give a range of values that are likely to include the true value of the parameter $\\theta$ with probability $(1-\\alpha) \\times 100\\%$\n\n  - $\\alpha = 0.05$ corresponds to a \"95-percent confidence interval\"\n\n- Our \"confidence\" is about the interval\n  \n- In repeated sampling, we expect that $(1-\\alpha) \\times 100\\%$ of the intervals we construct would contain the truth.\n\n- For any one interval, the truth, $\\theta$, either falls within in the lower and upper bounds of the interval or it does not.\n\n## Calculating Confidence Intervals{.smaller}\n\nIn general, there are two ways to calculate confidence intervals:\n\n- **Simulation:** Use our computers to simulate the idea of repeated sampling (e.g. bootstrapping)\n\n  - Flexible, but more computationally intensive\n\n- **Asymptotic Theory:** Use math to derive the properties of the distributions that would arise under repeated sampling\n  \n  - Faster, but requires more assumptions that may not hold\n\nWe will consider both. \n\n- The theory of CIs is easier to illustrate via simulation\n\n- The practice of calculating CIs is (generally) easier using asymptotic theory\n\n\n# {{< fa code >}} Bootstrapped Confidence Intervals {.inverse}\n\n## Overview\n\n- Simulate repeated sampling from the population, treating the 2024 NES pilot as our population\n\n- Vary the sample size\n\n- \n\n## Sampling Distributions\n\n## Standard Errors\n\n## Confidence Intervals\n\n\n## The Population\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#\n\n\ndf %>% \n  ggplot(aes(age))+\n  geom_density()+\n  geom_rug()+\n  stat_function(\n    fun = mean,\n    geom = \"vline\",\n    aes(xintercept = after_stat(y))\n  )+\n  xlim(x=0,100)+\n  ylim(0,.03)\n\ndf %>% \n  slice_sample(n=25) ->tmp\nmean(df$age,na.rm=T)\ntmp %>% \n  ggplot(aes(age))+\n  geom_density()+\n  geom_rug()+\n  stat_function(\n    fun = mean,\n    args = list(na.rm=T),\n    geom = \"vline\",\n    aes(xintercept = after_stat(y))\n  )+\n  xlim(x=0,100)+\n  ylim(0,.03)  \n```\n:::\n\n\n## A Single Sample\n\n\n## Repeated Samples\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ---- Population ----\n\n# Population average\nmu_age <- mean(df$age, na.rm=T)\n# Population standard deviation\nsd_age <- sd(df$age, na.rm = T)\n\n\n# Sample Data\n\nsample_data_fn <- function(dat=df, var=age, samps=16, sample_size=10){\n  df <- tibble(\n  sim = 1:samps,\n  distribution = \"Sampling\",\n  size = sample_size,\n  sample_from = \"Population\",\n  pop_mean = dat %>% pull(!!enquo(var)) %>% mean(., na.rm=T),\n) %>% \n  mutate(\n    sample = purrr::map(sim, ~ slice_sample(dat %>% select(!!enquo(var)), n = sample_size, replace = F)),\n    sample_mean = purrr::map_dbl(sample, \\(x) x %>% pull(!!enquo(var)) %>% mean(.,na.rm=T))\n  )\n  return(df)\n}\n\nplot_distribution <- function(the_pop,the_samp, the_var, ...){\n  mu_pop <- the_pop %>% pull(!!enquo(the_var)) %>% mean(., na.rm=T)\n  mu_samp <- the_samp %>% pull(!!enquo(the_var)) %>% mean(., na.rm=T)\n  ll <- the_pop %>% pull(!!enquo(the_var)) %>% as.numeric() %>%  min(., na.rm=T)\n  ul <- the_pop %>% pull(!!enquo(the_var)) %>% as.numeric() %>% max(., na.rm=T)\n  p<- the_samp %>% \n    ggplot(aes(!!enquo(the_var)))+\n    geom_density()+\n    geom_rug()+\n    theme_void()+\n    geom_vline(xintercept = mu_samp, col = \"red\")+\n    geom_vline(xintercept = mu_pop, col = \"grey40\",linetype = \"dashed\")+\n    xlim(ll,ul)\n  return(p)\n}\nplot_samples <- function(pop, x, variable, ...){\n  sample_plots <- x$sample[1:16] %>% \n  purrr::map( \\(x) plot_distribution(the_pop=pop, the_samp = x, \n                                     the_var = !!enquo(variable)))\n  p <- wrap_elements(wrap_plots(sample_plots[1:16], ncol=4))\n  return(p)\n  \n}\n\nplot_figure_fn <- function(d=df, v=age, sim=1000, size=10){\n  # Population average\n  mu <- d %>% pull(!!enquo(v)) %>% mean(., na.rm=T)\n  sd <- d %>% pull(!!enquo(v)) %>% sd(., na.rm=T)\n  se <- sd/sqrt(size)\n  # Range\n  ll <- d %>% pull(!!enquo(v)) %>% as.numeric() %>%  min(., na.rm=T)\n  ul <- d %>% pull(!!enquo(v)) %>% as.numeric() %>% max(., na.rm=T)\n  # Population standard deviation\n  # Sample data\n  samp_df <- sample_data_fn(dat=d, var = !!enquo(v), samps = sim, sample_size = size)\n  # Plot Population\n  p_pop <- d %>%\n    ggplot(aes(!!enquo(v)))+\n      geom_density(col =\"grey60\")+\n      geom_rug(col = \"grey60\", )+\n      geom_vline(xintercept = mu, col=\"grey40\", linetype=\"dashed\")+\n      theme_void()+\n      labs(title =\"Population\")+\n      xlim(ll,ul)+\n      theme(plot.title = element_text(hjust = 0))\n\n  theme_border <- theme_gray() + \n  theme(plot.background = element_rect(fill = NA, colour = 'black', size = 3))\n  \n  p_samps <- plot_samples(pop=d, x= samp_df,variable = !!enquo(v))\n  p_samps <- p_samps + ggtitle(paste(\"Repeated samples of size N =\",size,\"from the population\"))+theme(plot.title = element_text(hjust = 0.5), \n                                                                                                       plot.background = element_rect(fill = NA, colour = 'black', linewidth = 2))\n  \n  \n  p_dist <- samp_df %>% \n  ggplot(aes(sample_mean))+\n  geom_density(col=\"red\",aes(y= after_stat(ndensity)))+\n  geom_rug(col=\"red\")+\n  geom_density(data = df, aes(!!enquo(v), y= after_stat(ndensity)),\n               col=\"grey60\")+\n  geom_vline(xintercept = mu, col=\"grey40\", linetype=\"dashed\")+\n  xlim(ll,ul)+\n  theme_void()+\n    labs(\n      title = \"Sampling Distribution\"\n    )+  theme(plot.title = element_text(hjust = 0))\n  \n  p_upper <- tibble(x=0,y=0) %>%\n  ggplot(aes(x,y,))+\n      geom_segment(aes(x = -1, xend = -5.5 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = -.75, xend = -5 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = -.5, xend = -4.5 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = -.25, xend = -4 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = -.1, xend = -3.5 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = -.05, xend = -3 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      # Center\n          geom_segment(aes(x = 0, xend = -2.5 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = 0, xend = -2 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = 0, xend = -1.5 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = 0, xend = -1 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = 0, xend = -.5 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = 0, xend = 0 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = 0, xend = 2.5 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = 0, xend = 2 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = 0, xend = 1.5 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = 0, xend = 1 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = 0, xend = .5 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = 0, xend = 0 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      # Right\n      geom_segment(aes(x = 1, xend = 5.5 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = .75, xend = 5 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = .5, xend = 4.5 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = .25, xend = 4 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = .1, xend = 3.5 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_segment(aes(x = .05, xend = 3 , y=.9, yend=0.1),\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n  theme_void()+\n  coord_fixed(ylim=c(0,1),\n              xlim =c(-6,6),clip=\"off\")\n  # Lower\n  range_df <- samp_df %>% \n  summarise(\n    min = min(sample_mean),\n    max = max(sample_mean),\n    mean = mean(sample_mean)\n  )\n  \n  plot_df <- tibble(\n  id = 1:50,\n  # x = sort(rnorm(50, mu, sd)),\n  x = sort(runif(50, ll, ul)),\n  xend = sort(rnorm(50, mu, se)),\n  y = 9,\n  yend = 1\n)\n\np_lower <- plot_df %>%\n  ggplot(aes(x,y, group =id))+\n  geom_segment(aes(xend=xend, yend=yend),\n               col = \"red\",arrow = arrow(length = unit(0.05, \"npc\"))\n               )+\n  theme_void()+\n  coord_fixed(ylim=c(0,10),xlim = c(ll,ul),clip=\"off\")\n\n  \n  design <-\"##AAAA##\n            ##AAAA##\n            ##AAAA##\n            BBBBBBBB\n            BBBBBBBB\n            #CCCCCC#\n            #CCCCCC#\n            #CCCCCC#\n            #CCCCCC#\n            DDDDDDDD\n            DDDDDDDD\n            ##EEEE##\n            ##EEEE##\n            ##EEEE##\"\n  \n  fig <- p_pop / p_upper / p_samps / p_lower / p_dist +\n    plot_layout(design = design)\n  return(fig)\n\n\n  \n  \n  \n}\nfig_n10 <- plot_figure_fn(v=age,size = 10,sim = 100)\nfig_n30 <- plot_figure_fn(size = 30)\nfig_n300 <- plot_figure_fn(size = 300)\n\ntest <- sample_data_fn(df,samps =1000, sample_size = 10)\n\nrange_df <- test %>% \n  summarise(\n    min = min(sample_mean),\n    max = max(sample_mean),\n    mean = mean(sample_mean)\n  )\n\nplot_df <- tibble(\n  id = 1:20,\n  x = sort(runif(20, min(df$age,na.rm=T), max(df$age,na.rm=T))),\n  xend = sort(runif(20, range_df$min, range_df$max)),\n  y = .9,\n  yend = .1\n)\n\nplot_df %>%\n  ggplot(aes(x,y, group =id))+\n  geom_segment(aes(xend=xend, yend=yend))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np_lower <- tibble(x=1,y=1) %>% \n  ggplot(aes(x,y))+\n  geom_curve(aes(xend= -1, x= -5.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= -.75, x= -5 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= -.5, x= -4.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= -.25, x= -4 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= -.1, x= -3.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= -.05, x= -3 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      # Center\n          geom_curve(aes(xend= 0, x= -2.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.1,angle =80,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 0, x= -2 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.08,angle =60,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 0, x= -1.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.06,angle =40,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 0, x= -1 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.04,angle =20,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 0, x= -.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.02,angle =10,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 0, x= 0 , y=.9, yend=0.1),\n               col = \"red\",curvature = 0,angle =0,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 0, x= 2.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = .1,angle =80,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 0, x= 2 , y=.9, yend=0.1),\n               col = \"red\",curvature = .08,angle =60,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 0, x= 1.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = 0.06,angle =40,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 0, x= 1 , y=.9, yend=0.1),\n               col = \"red\",curvature = 0.04,angle =20,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 0, x= .5 , y=.9, yend=0.1),\n               col = \"red\",curvature = .02,angle =10,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      # Right\n      geom_curve(aes(xend= 1, x= 5.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = .1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= .75, x= 5 , y=.9, yend=0.1),\n               col = \"red\",curvature = .1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= .5, x= 4.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = .1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= .25, x= 4 , y=.9, yend=0.1),\n               col = \"red\",curvature = .1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= .1, x= 3.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = .1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= .05, x= 3 , y=.9, yend=0.1),\n               col = \"red\",curvature = .1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))\n\np_lower  \n\n p_lower <- tibble(x=1,y=1) %>% \n  ggplot(aes(x,y))+\n  geom_curve(aes(xend= -3, x= -5.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= -2.25, x= -5 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= -1.5, x= -4.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= -1.25, x= -4 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= -1.1, x= -3.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= -.5, x= -3 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      # Center\n          geom_curve(aes(xend= -.10, x= -2.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.1,angle =80,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 0, x= -2 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.08,angle =60,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 0, x= -1.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.06,angle =40,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 0, x= -1 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.04,angle =20,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 0, x= -.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = -.02,angle =10,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 0, x= 0 , y=.9, yend=0.1),\n               col = \"red\",curvature = 0,angle =0,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= .10, x= 2.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = .1,angle =80,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 0, x= 2 , y=.9, yend=0.1),\n               col = \"red\",curvature = .08,angle =60,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 0, x= 1.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = 0.06,angle =40,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 0, x= 1 , y=.9, yend=0.1),\n               col = \"red\",curvature = 0.04,angle =20,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 0, x= .5 , y=.9, yend=0.1),\n               col = \"red\",curvature = .02,angle =10,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      # Right\n      geom_curve(aes(xend= 3, x= 5.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = .1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 2.75, x= 5 , y=.9, yend=0.1),\n               col = \"red\",curvature = .1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 1.5, x= 4.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = .1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 1.4, x= 4 , y=.9, yend=0.1),\n               col = \"red\",curvature = .1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= 1.1, x= 3.5 , y=.9, yend=0.1),\n               col = \"red\",curvature = .1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n      geom_curve(aes(xend= .5, x= 3 , y=.9, yend=0.1),\n               col = \"red\",curvature = .1,angle =90,\n               arrow = arrow(length = unit(0.05, \"npc\")))+\n```\n:::\n\n\n\n## Confidence Intervals\n\n## Overview\n\n# {{< fa code >}} Hypothesis Testing {.inverse}\n\n## Overview\n\n\n\n\n## Concept\n\n\n# {{< fa code>}} Code {.inverse}\n\n## Code\n\n# {{< fa home >}} Summary {.inverse}\n\n## Summary\n\n\n\n## References",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}