{
  "hash": "24dad646b72a9dcb817b58e6b3b664de",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"POLS 1600\"\nsubtitle: \"Quantifying uncertainty:<br> Confidence Intervals & Hypothesis Tests\"\ndate: last-modified\ndate-format: \"[Updated ]MMM D, YYYY\"\nformat: \n  revealjs:\n    theme: brownslides.scss\n    logo: images/pols1600_hex.png\n    footer: \"POLS 1600\"\n    multiplex: false\n    transition: fade\n    slide-number: c\n    incremental: true\n    center: false\n    menu: true\n    scrollable: true\n    highlight-style: github\n    progress: true\n    code-overflow: wrap\n    chalkboard: true\n    # include-after-body: title-slide.html\n    title-slide-attributes:\n      align: left\n      data-background-image: images/pols1600_hex.png\n      data-background-position: 90% 50%\n      data-background-size: 40%\nfilters:\n  - openlinksinnewpage\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  message: false\n  cache: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# {{< fa map-location>}} Overview {.inverse}\n\n## Class Plan\n\n- Announcements\n- Feedback\n- Review\n- Class plan\n\n\n## Annoucements\n\n## Feedback\n\n## {{< fa lightbulb >}}  Concepts \n\n## {{< fa code>}} Code   \n\n# {{< fa magnifying-glass>}} Review {.inverse}\n\n## Review\n\n# {{< fa lightbulb >}} Confidence Intervals {.inverse}\n\n\n## Confidence Intervals{.smaller}\n\n- Confidence intervals provide a way of [quantifying uncertainty]{.blue} about [estimates]{.blue}\n\n- Confidence intervals describe a [range of plausible values]{.blue} for an estimate\n\n- That range is a function of the [standard error]{.blue} of the estimate, and the a [critical value]{.blue} determined by $\\alpha$, which describes the degree of confidence we want \n  \n  - A 95% confidence interval corresponds to an $\\alpha$ of 0.05\n\n- A [standard error]{.blue} is the standard deviation of a theoretical [sampling distribution]{.blue} of our estimate\n\n- We can obtain the sampling distribution via:\n\n  - [simulation]{.blue} (bootstrapping)\n  - [asymptotic theory]{.blue} (the CLT)\n\n- Our confidence [is about the interval]{.blue}, not the specific value of the estimate.\n\n## Populations and Samples{.smaller}\n\n\n- [Population]{.blue: All the cases from which you could have sampled\n\n- [Parameter:]{.blue} A quantity or quantities of interest often generically called $\\theta$ (\"theta\"). Something we'd like to know about our population\n\n- [Sample:]{.blue} A (random) draw from that population\n\n- [Sample Size:]{.blue} The number of observations in your draw (without replacement)\n\n## Estimators, Estimates, and Statistics{.smaller}\n\n- [Estimator:]{.blue} A rule for calculating an *estimate* of our parameter of interest. \n\n- [Estimate:]{.blue} The value produced by some estimator for some parameter from some data. Often called $\\hat{\\theta}$ \n\n- [Unbiased estimators:]{.blue} $E(\\hat{\\theta})=E(\\theta)$ On average, the estimates produced by some estimator will be centered around the truth\n\n- [Consistent estimates:]{.blue} $\\lim_{n\\to \\infty} \\hat{\\theta_N} = \\theta$ As the sample size increases, the estimates from an estimator converge in probability to the parameter value\n\n- [Statistic:]{.blue} A summary of the data (mean, regression coefficient, $R^2$). An estimator without a specified target of inference \n\n## Distrubtions and Standard Errors{.smaller}\n\n- [Sampling Distribution:]{.blue} How some estimate would vary if you took repeated samples from the population\n\n- [Standard Error:]{.blue} The standard deviation of the sampling distribution\n\n- [Resampling Distribution:]{.blue} How some estimate would vary if you took repeated samples [from your sample WITH REPLACEMENT]{.blue} \n    - \"Sampling from our sample, as the sample was sampled from the population.\"\n    \n## Confidence Intervals: Interpretation{.smaller}\n\n- Confidence intervals give a range of values that are likely to include the true value of the parameter $\\theta$ with probability $(1-\\alpha) \\times 100\\%$\n\n  - $\\alpha = 0.05$ corresponds to a \"95-percent confidence interval\"\n\n- Our \"confidence\" is about the interval\n  \n- In repeated sampling, we expect that $(1-\\alpha) \\times 100\\%$ of the intervals we construct would contain the truth.\n\n- For any one interval, the truth, $\\theta$, either falls within in the lower and upper bounds of the interval or it does not.\n\n## Calculating Confidence Intervals{.smaller}\n\nIn general, there are two ways to calculate confidence intervals:\n\n- **Simulation:** Use our computers to simulate the idea of repeated sampling (e.g. bootstrapping)\n\n  - Flexible, but more computationally intensive\n\n- **Asymptotic Theory:** Use math to derive the properties of the distributions that would arise under repeated sampling\n  \n  - Faster, but requires more assumptions that may not hold\n\nWe will consider both. \n\n- The theory of CIs is easier to illustrate via simulation\n\n- The practice of calculating CIs is (generally) easier using asymptotic theory\n\n\n# {{< fa code >}} Bootstrapped Confidence Intervals {.inverse}\n\n## Overview\n\n# {{< fa code >}} Hypothesis Testing {.inverse}\n\n## Overview\n\n\n\n\n## Concept\n\n\n# {{< fa code>}} Code {.inverse}\n\n## Code\n\n# {{< fa home >}} Summary {.inverse}\n\n## Summary\n\n## References",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}