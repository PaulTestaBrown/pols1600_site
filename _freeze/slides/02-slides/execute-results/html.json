{
  "hash": "4251c271547b07def5c143ad531b1e94",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"POLS 1600\"\nsubtitle: \"Topic\"\ndate: last-modified\ndate-format: \"[Updated ]MMM D, YYYY\"\nformat: \n  revealjs:\n    theme: brownslides.scss\n    logo: images/pols1600_hex.png\n    footer: \"POLS 1600\"\n    multiplex: false\n    transition: fade\n    slide-number: c\n    incremental: true\n    center: false\n    menu: true\n    scrollable: true\n    highlight-style: github\n    progress: true\n    code-overflow: wrap\n    # include-after-body: title-slide.html\n    title-slide-attributes:\n      align: left\n      data-background-image: images/pols1600_hex.png\n      data-background-position: 90% 50%\n      data-background-size: 40%\nfilters:\n    - openlinksinnewpage\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  \n    # title-slide-attributes:\n    #   data-background-image: ../../assets/stat20-hex-bg.png\n    #   data-background-size = contain\n---\n\n::: {.cell}\n\n:::\n\n\n# {{< fa map-location>}} Overview {.inverse}\n\n## Class Plan {.smaller}\n\n- Announcements\n- Review\n  - Troubleshooting Errors (5 min)\n  - Data wrangling in R (15 min)\n  - Descriptive Statistics (10 min)\n- Feedback (5 min)\n- Data Visualization\n  - The grammar of graphics\n  - Plots to describe:\n    - Distributions\n    - Associations\n\n## Annoucements\n\n\n# {{< fa code>}} Setup {.inverse}\n\n## Setup for today\n\n\n## Libraries\n\nThis week we'll use the following libraries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthe_packages <- c(\n  ## R Markdown\n  \"tinytex\", \"kableExtra\",\n  \n  ## Tidyverse\n  \"tidyverse\",\"lubridate\", \"forcats\", \"haven\",\"labelled\",\n  \n  ## Extensions for ggplot\n  \"ggmap\",\"ggrepel\", \"ggridges\", \"ggthemes\",\"ggpubr\",\n  \"GGally\",\n  \n  # Data \n  \"COVID19\",\"maps\",\"mapdata\",\"DT\"\n)\nthe_packages\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"tinytex\"    \"kableExtra\" \"tidyverse\"  \"lubridate\"  \"forcats\"   \n [6] \"haven\"      \"labelled\"   \"ggmap\"      \"ggrepel\"    \"ggridges\"  \n[11] \"ggthemes\"   \"ggpubr\"     \"GGally\"     \"COVID19\"    \"maps\"      \n[16] \"mapdata\"    \"DT\"        \n```\n\n\n:::\n:::\n\n\n## Installing and loading new packages\n\nNext we'll create a function called `ipak` (thanks [Steven](https://gist.github.com/stevenworthington/3178163)) which:\n\n- Takes a list of packages (`pkg`)\n- Checks to see if these packages are installed\n- Installs any new packages\n- Loads all the packages so we can use them\n\n\n::: {.cell}\n\n```{.r .cell-code}\nipak <- function(pkg){\n    new.pkg <- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\n    if (length(new.pkg)) \n        install.packages(new.pkg, dependencies = TRUE)\n    sapply(pkg, require, character.only = TRUE)\n}\n```\n:::\n\n\nAgain, run this code on your machines\n\n\n## Installing and loading new packages {.smaller}\n\nFinally, let's use `ipak` to install and load `the_packages`\n\nWhat should we replace `some_function` and `some_input` with to do this?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsome_function(some_input)\n```\n:::\n\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nipak(the_packages)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   tinytex kableExtra  tidyverse  lubridate    forcats      haven   labelled \n      TRUE       TRUE       TRUE       TRUE       TRUE       TRUE       TRUE \n     ggmap    ggrepel   ggridges   ggthemes     ggpubr     GGally    COVID19 \n      TRUE       TRUE       TRUE       TRUE       TRUE       TRUE       TRUE \n      maps    mapdata         DT \n      TRUE       TRUE       TRUE \n```\n\n\n:::\n:::\n\n\n\n- `R` may ask you to install a package's dependencies (other packages  your package needs). Try entering the number `1` into your console\n- `R` may tell you need to restart `R` Try saying yes. If it doesn't start downloading, say no\n- `R` may then ask if you want to compile some packages from source. Type `Y` into your console. If this doesn't work, try again, but this time type `N` when asked\n\n## Tutorials\n\n- Install tutorials:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Uncomment and install\n# install.packages(\"devtools\")\n# install.packages(\"remotes\")\nremotes::install_github(\"kosukeimai/qss-package\", build_vignettes = TRUE)\nremotes::install_github(\"rstudio/learnr\")\nremotes::install_github(\"rstudio-education/gradethis\")\nremotes::install_github(\"PaulTestaBrown/qsslearnr\")\n```\n:::\n\n\n\n# {{< fa magnifying-glass>}} Troubleshooting Errors {.inverse}\n\n## \n\n![](https://imgs.xkcd.com/comics/wisdom_of_the_ancients.png)\n\n[XKCD](https://xkcd.com/979)\n\n## Two kinds of errors:{.smaller}\n\n\n- **Syntactic**\n  - R doesn't understand how to run your code\n  - Most common, easy to fix (eventually...)\n\n. . .\n\n- **Semantic**\n  - R runs your code but doesn't give you the expected result\n  - Less common, harder to fix\n\n. . .\n\nMost errors happen because R is looking for something that isn't there.\n\nMore discussion [here](https://github.com/noamross/zero-dependency-problems/blob/master/misc/stack-overflow-common-r-errors.md) and [here](https://blog.revolutionanalytics.com/2015/03/the-most-common-r-error-messages.html)\n\n\n## Common Syntactic Errors\n\n- Unmatched parentheses or brackets\n\n- Misspelled a name \n\n- Forgot a comma\n\n- Forgot to install a package or load a library\n\n- Forgot to set the working directory/path to a file you want R to use.\n\n- Tried to select a column or row that doesn't exist\n\n\n\n## Fixing Syntactic Errors {.smaller}\n\n- R Studio's script editor will show a red circle with a white x in next to a line of code it thinks has an error in it.\n\n- Have someone else look at your code (Fresh eyes, [paired programming](https://en.wikipedia.org/wiki/Pair_programming))\n\n- Copy and paste the \"general part\" of error message into Google.\n\n- Knit your document after each completed code chunk\n  - This will run the code from top to bottom, and stop when it encounters an error\n  - Try commenting out the whole chunk, and then uncommenting successive lines of code \n\n- Be patient. Don't be hard are yourself. Remember, errors are portals of discovery.\n\n\n## Semantic Errors\n\n- Your code runs, but doesn't produce what you expected.\n- Less common;  can be harder to identify and fix\n- One example: Two packages have a function with the same name that do different things\n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dplyr::summarize\n# Hmisc::summarize\n```\n:::\n\n\n\n## Semantic Errors{.smaller}\n\n- Some general solutions/practices to avoid semantic errors:\n  - Specify the package and the function you want: `package_name::function_name()`\n  - Write helpful comments in your code.\n  - Include \"sanity\" checks in your code. \n  - If a function should produce an output that's a data.frame, check to see if it is a data frame\n\n. . .\n  \n\n::: {.cell}\n\n```{.r .cell-code}\n# Here's some pseudo code:\n\n# I expect my_function produces a data frame\nx <- my_function(y) \n\n# Check to see if x is a data frame\n# If x is not a data frame, return an Error\nstopifnot(is.data.frame(x))\n```\n:::\n\n\n\n\n# {{< fa magnifying-glass>}} Data Wrangling in R {.inverse}\n\n## Data Wrangling in R\n\n# {{< fa magnifying-glass>}} Descriptive Statistics {.inverse}\n\n## Descriptive Statistics\n\n\n# {{< fa bullhorn >}} Feedback {.inverse}\n\n## What we liked\n\n## What we disliked\n\n\n# {{< fa lightbulb >}} Data Visualization:  The Grammar of Graphics {.inverse}\n\n## The Grammar of Graphics\n\n# {{< fa lightbulb >}} DataViz:  Describing Distributions {.inverse}\n\n## Describing Distributions\n\n# {{< fa lightbulb >}} DataViz:  Describing Associations {.inverse}\n\n## Describing Associations\n\n# {{< fa home >}} Summary {.inverse}\n\n## Summary\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}