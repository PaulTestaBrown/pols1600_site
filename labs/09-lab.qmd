---
title: "Lab 09 - Exploring data in the 2020 National Elections Study"
author: "Your Group Members Names Here"
date: "Last Updated `r format(Sys.Date())`"
format:
  html:
    toc: true
    toc-location: right
    toc-float: true
    toc-depth: 2
    number-sections: true
execute: 
  eval: true
  echo: true
  warning: false
  message: false
  cache: true
---

```{r}
#| label = "setup",
#| include = FALSE,
#| cache = FALSE
knitr::opts_chunk$set(error = TRUE, 
                      comment = NA, 
                      warnings = FALSE, 
                      errors = FALSE, 
                      message = FALSE, 
                      cache = TRUE,
                      tidy = FALSE)

htmltools::tagList(
  xaringanExtra::use_clipboard(
    button_text = "<i class=\"fa fa-clipboard\"></i>",
    success_text = "<i class=\"fa fa-check\" style=\"color: #90BE6D\"></i>",
  ),
  rmarkdown::html_dependency_font_awesome()
)
```

# Overview {.unnumbered}

In this lab, we continue our replication of [Grumbach and Hill (2021)](https://www.journals.uchicago.edu/doi/full/10.1086/714776) "Rock the Registration: Same Day Registration Increases Turnout of Young Voters."

To accomplish this we will:

0. Load packages. (5 minutes)

1. **Set working directory and load the data** from last class. (5 minutes)

2. Do some additional **recoding** (5 minutes)

3. **Describe** variation in voting by state, year, policy, and age (20 minutes)

4. **Estimate** four regression models to understand **fixed effects** and **cluster robust standard errors** (20 minutes)

5.  **Replicate** two regression models from Grumbach and Hill (2021) **interacting** `sdr` with `age_group` (10 minutes)

6. **Recreate** a portion of Figure 3 showing the **marginal effect** of `sdr` by age group. (15 minutes)

Finally, we'll take the survey for this week

One of these 6 tasks will be randomly selected as the graded question for the lab.

You will work in your assigned groups. Only one member of each group needs to submit the html file of lab.

This lab **must** contain the names of the group members in attendance.

If you are attending remotely, you will submit your labs individually.

Here are your assigned groups for the semester.

```{r}
#| label: groups
#| echo: false
groups_df <- readr::read_csv("https://pols1600.paultesta.org/files/groups.csv")

DT::datatable(groups_df)
```

# Goals {.unnumbered}

This week's lab will give you practice:

- Loading data from your own computers (Q1)

- Data wrangling with conditional logic (Q2)

- Describing variation to help illustrate the motivation behind fixed effects regression (Q3)

- Using `lm_robust()` to easily estimate models with fixed effects and robust clustered standard errors (Q4)

- Estimating and interpreting interaction models (Q5-6) to test conditional claims (like does the effect of Same Day Registration vary across age cohorts)


# Workflow {.unnumbered}

## Please render this .qmd file {.unnumbered}

As with every lab, you should:

-   Download the file
-   Save it in your course folder
-   **Update the `author:` section of the YAML header to include the names of your group members in attendance.**
-   Render the document
-   Open the html file in your browser (Easier to read)
-   Write your code in the **chunks provided under each section**
-   Comment out or delete any test code you do not need
-   **Render the document again after completing a section or chunk** (Error checking)
-   Upload the final lab to [Canvas](https://canvas.brown.edu/courses/1094972/assignments){target="_blank"}.

# Get set up to work{.unnumbered}

## Load packages {.unnumbered}


# Set up your Environment

In the code chunk below:

- Please add code to load the package `DeclareDesign`



```{r}
# Libraries
library(tidyverse)
library(haven)
library(labelled)
library(kableExtra)
```

In R studio set your working directory to the folder where this lab is saved.

- Session > Set Working Directory > Source File Location

After doing so uncomment `getwd()` Should print out something like

> "~/Desktop/pols1600/labs/"

Depending on where your lab is saved

```{r}
# In the Top Panel of RStudio Click
# Session > Set Working Directory > Source File Location

# Uncomment to Check Where Your File is Saved 
# getwd()
```

:::{.callout-note}
If `getwd()` says something like '~/Downloads/' click: "File > Save As" and save this lab in your course folder. Then **close** the version `09-lab.qmd` that was openned from your Downloads folder and **open** the version of `09-lab.qmd` that now exists in your course folder.
:::


# Download and load the NES data into R

Please click [here](https://electionstudies.org/data-center/2024-pilot-study/) to go to the download page for the National Election Studies 2024 Pilot Study

- Click the **Log-in Button**

- Create an account with the NES

- Right click (Crtl-click) on the DTA button. This will allow you to select `Save Link As...` Which should in turn allow you to chose where the file is saved. Save it in the **same folder as 09-lab.qmd**

- Unzip `anes_pilot_2024_dta_20240319.zip`. 
  - On a Mac this creates a new folder called `anes_pilot_2024_dta_20240319` in your course folder which contains the following files:
  - `anes_pilot_2024_dta_20240319.dta` the data
  - `anes_pilot_2024_userguidecodebook_20240319.pdf` the codebook for the data
  - On a PC it may unzip the files directly into your course folder.  

- Load the data using some version of the following commands:

```{r}
## IF .dta file is in subfolder where lab is:
# df <- read_dta("~/anes_pilot_2024_dta_20240319/anes_pilot_2024_dta_20240319.dta")

## IF .dta file is in SAME folder as lab:
# df <- read_dta("anes_pilot_2024_dta_20240319.dta")

## IF nothing works, fear not, you can load the data from the web as a backup
# df <- read_dta(url("https://pols1600.paultesta.org/files/data/anes_pilot_2024_dta_20240319.dta"))
```



# Explore the Codebook

## Identify one outcome interest

## Indentify one key predictor


# Get a high level overview of the data

## Examine the distributions and values of your outcome variable


```{r}
# Vote Choice
get_variable_labels(df$vchoice_rematch)
get_value_labels(df$vchoice_rematch)
table(df$vchoice_rematch,useNA = "ifany")

# Acts of Participation
# All variables start with mobil_ prefix
df %>% select(starts_with("mobil")) %>% names()

# Political Talk
get_variable_labels(df$mobil_talk)
get_value_labels(df$mobil_talk)
table(df$mobil_talk,useNA = "ifany")


# Save the names all variables related to acts of participation in 2020
the_participation_vars <- df %>% select(starts_with("mobil")) %>% names()
# Only keep the variables that measure participation and not survey timing
the_participation_vars <- the_participation_vars[1:5]

```

**Outcomes**

- Recode `vchoice_rematch` to `dv_vote_trump2024` 
  - equals 1 if `vchoice_rematch == 1` 
  - equals 0 if `vchoice_rematch == 2` 
  - equals `NA` if `vchoice_rematch < 0`

- Recode `mobil_*` variables to `polpart_*` that:
  - equals 1 if `mobil_* == 1` 
  - equals 0 if `mobil_* == 2` 
  - equals `NA` if `mobil_*` < 0`

- Create `dv_participation*` that is sum of respondents' five responses to `polpart_*` variables 

## Write down any recoding for your outcome variable


- Recode `YOUR OUTCOME VARIABLE HERE` to `NAME FOR RECODED VARIABLE`
  - Describe the recodes you will do
  


## Examine the distributions and values of your predictor variable


```{r}
# Age
get_variable_labels(df$age)
get_value_labels(df$age)
summary(df$age)


# Education
get_variable_labels(df$educ)
get_value_labels(df$educ)
summary(df$educ)


# Income
get_variable_labels(df$faminc_new)
get_value_labels(df$faminc_new)
summary(df$faminc_new)
table(df$faminc_new)


# Race
get_variable_labels(df$race)
get_value_labels(df$race)
summary(df$race)
table(df$race,useNA = "ifany")


# Partisanship
get_variable_labels(df$pid7)
get_value_labels(df$pid7)
summary(df$pid7)
table(df$pid7)


```





**Predictors**

- `age` to `age` 
  - recode `-9`s to `NA`
- `educ`
  - create indicator `has_college_degree` which equals `1` is `educ > 4` and `0` otherwise
- `faminc_new` to `income`
  - recode `-7` and `97` to `NA`
- `race` to `race_5cat`
  - `race == 1 ~ "White"`
  - `race == 2 ~ "Black"`
  - `race == 3 ~ "Hispanic"`
  - `race == 4 ~ "Asian"`
  - `T ~ "Other"` (Collapse other racial categories)
- `race` to `is_*` binary indicators:
  - `is_white == 1` if "race==1", `0` otherwise
- `pid7` to `partyid`
  - recode `pid7 == 8` to `4` (Classify `Don't Knows` as Independents)
- `pid7` to `is_*`: binary indicators:
  - `is_dem == 1` if `partyid < 4`, 0 otherwise 
  - `is_rep == 1` if `partyid > 4`, 0 otherwise 
  - `is_ind == 1` if `partyid == 4`, 0 otherwise 

## Write down any recoding for your outcome variable


- Recode `YOUR PREDICTOR VARIABLE HERE` to `NAME FOR RECODED VARIABLE`
  - Describe the recodes you will do

# Recode the data

## Recode the outcome variables

```{r}

df %>%
  # Recode 2024 Vote Choice
  mutate(
    dv_vote_trump2024 = case_when(
      vchoice_rematch == 1 ~ 1,
      vchoice_rematch == 2 ~ 0,
      T ~ NA
    )
  ) %>% 
  # Recode Individual Acts of Participation
  mutate(across(all_of(the_participation_vars), 
                \(x) case_when(
                  x == 1 ~ 1,
                  x == 2 ~ 0,
                  T ~ NA
                ),
                .names = "polpart_{.col}"
                )
                
                ) %>% 
  # Create Additive Measure of Participation
  mutate(
    dv_participation = rowSums(
      select(.,starts_with("polpart")),
      na.rm = T)
    
  ) %>% 
# ---- YOUR TURN: Recode your chosen Outcome ----
  mutate(
    
  ) -> df
```

## Check your recoding of your outcome

```{r}
# Check recodes

table(recode=df$dv_vote_trump2024,
      original=df$vchoice_rematch, 
      useNA = "ifany")
table(recode=df$polpart_mobil_button,
  original=df$mobil_button, 
      useNA = "ifany")
table(total=df$dv_participation,
  item=df$polpart_mobil_button, 
      useNA = "ifany")

```


## Recode your predictor variables


```{r}

df %>% 
  mutate(
    # Age
    age = ifelse(age < 0, NA, age),
    # Education
    education = educ,
    educ_f = to_factor(educ), #Convert to Factor for Plotting
    is_college_grad = ifelse(educ > 4,1,0),
    # Income
    income = case_when(
      faminc_new < 0 ~ NA,
      faminc_new > 0 & faminc_new >16 ~ NA,
      T ~ faminc_new
    ),
    # Race
    race_5cat = case_when(
      race < 5 ~ to_factor(race),
      T ~ "Other"
    ) %>% factor(., levels = c("White","Black","Hispanic","Asian","Other")),
    is_white = ifelse(race == 1, 1, 0),
    is_black = ifelse(race == 2, 1, 0),
    is_hispanic = ifelse(race == 3, 1, 0),
    is_asian = ifelse(race == 4, 1, 0),
    is_other = ifelse(race == 5, 1, 0),
    # Partisanship
    partyid = case_when(
      pid7 == 8 ~ 4,
      T ~ pid7
    ),
    is_dem = ifelse(partyid  < 4, 1, 0),
    is_rep = ifelse(partyid  > 4, 1, 0),
    is_ind = ifelse(partyid  == 4, 1, 0),
  ) %>% 
# ---- YOUR TURN: Recode your Predictor of Interest ----
  mutate(
    
  ) -> df


```


# Describe the Data

## Create a Table of Summary Statistics

```{r}
the_vars <- c(
  "dv_vote_trump2024", "dv_participation",
  "age","education","income",
  "is_white","is_black","is_hispanic","is_asian","is_other",
  "partyid","is_dem","is_rep","is_ind"
)

the_labels <- c(
  "Vote for Trump in '24",
  "Acts of Participation in `20",
  "Age","Education", "Income",
  "White", "Black","Hispanic","Asian","Other",
  "Party ID", "Democrat","Republican","Independent"
)

df_summary <- df %>% 
  select(all_of(the_vars)) %>%
  rename_with(~the_labels) %>% 
  pivot_longer(
    cols = everything(),
    names_to = "Variable"
  ) %>% 
  mutate(
    Variable = factor(Variable, levels = the_labels)
  ) %>% 
  group_by(Variable) %>% 
  summarise(
    Min = min(value,na.rm = T),
    p25 = quantile(value, prob = .25,na.rm = T),
    Median = quantile(value, prob = .5,na.rm = T),
    Mean = mean(value, na.rm = T),
    p75 = quantile(value, prob = .75,na.rm = T),
    Max = max(value,na.rm = T),
    `N missing` = sum(is.na(value))
  )
```

```{r}
kable(df_summary,
      digits = 2) %>% 
  kable_styling() %>% 
  pack_rows("Outcomes",1,2) %>% 
  pack_rows("Demographic Predictors",3,10) %>% 
  pack_rows("Political Predictors",11,14)
```

## Modify the table to include your predictors



## Visualize the Data

```{r}
df %>% 
  ggplot(aes(race_5cat,age,
             col = race_5cat))+
  geom_boxplot()+
  labs(
    x = "Race",
    y = "Age",
    title = "Distribution of Age by Race in 2024 NES Pilot Study"
  )+
  guides(col="none")+
  theme_minimal()
```

# Save your data



# Formulate your research question


