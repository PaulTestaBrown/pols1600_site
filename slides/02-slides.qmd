---
title: "POLS 1600"
subtitle: "Topic"
date: last-modified
date-format: "[Updated ]MMM D, YYYY"
format: 
  revealjs:
    theme: brownslides.scss
    logo: images/pols1600_hex.png
    footer: "POLS 1600"
    multiplex: false
    transition: fade
    slide-number: c
    incremental: true
    center: false
    menu: true
    scrollable: true
    highlight-style: github
    progress: true
    code-overflow: wrap
    # include-after-body: title-slide.html
    title-slide-attributes:
      align: left
      data-background-image: images/pols1600_hex.png
      data-background-position: 90% 50%
      data-background-size: 40%
filters:
    - openlinksinnewpage
execute: 
  eval: true
  echo: true
  warning: false
  
    # title-slide-attributes:
    #   data-background-image: ../../assets/stat20-hex-bg.png
    #   data-background-size = contain
---

```{r}
#| echo: false
#| results: hide
#| warning: false 
#| message: false

library(tidyverse)
library(labelled)
library(haven)
library(DeclareDesign)
library(easystats)
```

# {{< fa map-location>}} Overview {.inverse}

## Class Plan {.smaller}

- Announcements
- Review
  - Troubleshooting Errors (5 min)
  - Data wrangling in R (15 min)
  - Descriptive Statistics (10 min)
- Feedback (5 min)
- Data Visualization
  - The grammar of graphics
  - Plots to describe:
    - Distributions
    - Associations

## Annoucements


# {{< fa code>}} Setup {.inverse}

## Setup for today


## Libraries

This week we'll use the following libraries.

```{r}
#| label = "packages",
#| cache = F
the_packages <- c(
  ## R Markdown
  "tinytex", "kableExtra",
  
  ## Tidyverse
  "tidyverse","lubridate", "forcats", "haven","labelled",
  
  ## Extensions for ggplot
  "ggmap","ggrepel", "ggridges", "ggthemes","ggpubr",
  "GGally",
  
  # Data 
  "COVID19","maps","mapdata","DT"
)
the_packages
```

## Installing and loading new packages

Next we'll create a function called `ipak` (thanks [Steven](https://gist.github.com/stevenworthington/3178163)) which:

- Takes a list of packages (`pkg`)
- Checks to see if these packages are installed
- Installs any new packages
- Loads all the packages so we can use them

```{r}
#| label = "ipak"
ipak <- function(pkg){
    new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
    if (length(new.pkg)) 
        install.packages(new.pkg, dependencies = TRUE)
    sapply(pkg, require, character.only = TRUE)
}

```

Again, run this code on your machines


## Installing and loading new packages {.smaller}

Finally, let's use `ipak` to install and load `the_packages`

What should we replace `some_function` and `some_input` with to do this?

```{r}
#| eval = F
some_function(some_input)
```


. . .

```{r}
#| label = "libraries",
#| cache = F
ipak(the_packages)
```


- `R` may ask you to install a package's dependencies (other packages  your package needs). Try entering the number `1` into your console
- `R` may tell you need to restart `R` Try saying yes. If it doesn't start downloading, say no
- `R` may then ask if you want to compile some packages from source. Type `Y` into your console. If this doesn't work, try again, but this time type `N` when asked

## Tutorials

- Install tutorials:

```{r}
#| eval: false


# Uncomment and install
# install.packages("devtools")
# install.packages("remotes")
remotes::install_github("kosukeimai/qss-package", build_vignettes = TRUE)
remotes::install_github("rstudio/learnr")
remotes::install_github("rstudio-education/gradethis")
remotes::install_github("PaulTestaBrown/qsslearnr")
```


# {{< fa magnifying-glass>}} Troubleshooting Errors {.inverse}

## 

![](https://imgs.xkcd.com/comics/wisdom_of_the_ancients.png)

[XKCD](https://xkcd.com/979)

## Two kinds of errors:{.smaller}


- **Syntactic**
  - R doesn't understand how to run your code
  - Most common, easy to fix (eventually...)

. . .

- **Semantic**
  - R runs your code but doesn't give you the expected result
  - Less common, harder to fix

. . .

Most errors happen because R is looking for something that isn't there.

More discussion [here](https://github.com/noamross/zero-dependency-problems/blob/master/misc/stack-overflow-common-r-errors.md) and [here](https://blog.revolutionanalytics.com/2015/03/the-most-common-r-error-messages.html)


## Common Syntactic Errors

- Unmatched parentheses or brackets

- Misspelled a name 

- Forgot a comma

- Forgot to install a package or load a library

- Forgot to set the working directory/path to a file you want R to use.

- Tried to select a column or row that doesn't exist



## Fixing Syntactic Errors {.smaller}

- R Studio's script editor will show a red circle with a white x in next to a line of code it thinks has an error in it.

- Have someone else look at your code (Fresh eyes, [paired programming](https://en.wikipedia.org/wiki/Pair_programming))

- Copy and paste the "general part" of error message into Google.

- Knit your document after each completed code chunk
  - This will run the code from top to bottom, and stop when it encounters an error
  - Try commenting out the whole chunk, and then uncommenting successive lines of code 

- Be patient. Don't be hard are yourself. Remember, errors are portals of discovery.


## Semantic Errors

- Your code runs, but doesn't produce what you expected.
- Less common;  can be harder to identify and fix
- One example: Two packages have a function with the same name that do different things

. . . 

```{r}
# dplyr::summarize
# Hmisc::summarize
```


## Semantic Errors{.smaller}

- Some general solutions/practices to avoid semantic errors:
  - Specify the package and the function you want: `package_name::function_name()`
  - Write helpful comments in your code.
  - Include "sanity" checks in your code. 
  - If a function should produce an output that's a data.frame, check to see if it is a data frame

. . .
  
```{r}
#| eval: false
# Here's some pseudo code:

# I expect my_function produces a data frame
x <- my_function(y) 

# Check to see if x is a data frame
# If x is not a data frame, return an Error
stopifnot(is.data.frame(x))
```



# {{< fa magnifying-glass>}} Data Wrangling in R {.inverse}

## Data Wrangling in R

# {{< fa magnifying-glass>}} Descriptive Statistics {.inverse}

## Descriptive Statistics


# {{< fa bullhorn >}} Feedback {.inverse}

## What we liked

## What we disliked


# {{< fa lightbulb >}} Data Visualization:  The Grammar of Graphics {.inverse}

## The Grammar of Graphics

# {{< fa lightbulb >}} DataViz:  Describing Distributions {.inverse}

## Describing Distributions

# {{< fa lightbulb >}} DataViz:  Describing Associations {.inverse}

## Describing Associations

# {{< fa home >}} Summary {.inverse}

## Summary
