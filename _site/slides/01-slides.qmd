---
title: "POLS 1600"
subtitle: "Data and Measurement"
date: last-modified
date-format: "[Updated ]MMM D, YYYY"
format: 
  revealjs:
    theme: [default, brownslides.scss]
    logo: images/pols1600_hex.png
    footer: "POLS 1600"
    multiplex: false
    transition: fade
    slide-number: c
    incremental: true
    center: false
    menu: true
    scrollable: true
    highlight-style: github
    progress: true
    code-overflow: wrap
    # include-after-body: title-slide.html
    title-slide-attributes:
      align: left
      data-background-image: images/pols1600_hex.png
      data-background-position: 90% 50%
      data-background-size: 40%
execute: 
  echo: true
filters:
  - openlinksinnewpage
---

```{r}
#| label: setup
#| echo: false
#| results: hide
#| warning: false 
#| message: false

library(tidyverse)
library(haven)
library(labelled)
library(DeclareDesign)
library(easystats)

# Class survey

df <- haven::read_spss("../files/data/class_surveys/wk00.sav")


```

# {{< fa map-location>}} Overview {.inverse}

## Class Plan {.smaller}

-   Logistics (15 minutes)
    -   Announcements
    -   Feedback
-   Class plan (60 minutes)
    -   Introduction to R, R Studio and Quarto
    -   Loading and Looking at Data in R
    -   Transforming, Recoding, and Cleaning Data in R
    -   Describing Data in R
    -   Exploring Covid-19 Data for Lab

## Annoucements

-   If it's your first time here you'll need to work through [Software Setup](../resources/00-software-setup.qmd) to follow along today

    -   Talk to me after class if you're having installation issues

-   If you're still on the waitlist on CAB, speak to me after class


## Tutorials

Once you've done the following

```{r}
#| eval = F

remotes::install_github("kosukeimai/qss-package", build_vignettes = TRUE)
remotes::install_github("rstudio/learnr")
remotes::install_github("rstudio-education/gradethis")
remotes::install_github("PaulTestaBrown/qsslearnr")
```

You can see the available problem sets by running the following code in your console:

```{r}
learnr::run_tutorial(package = "qsslearnr")
```

## Tutorials

And start a specific tutorial by running:

```{r}
#| eval = F
learnr::run_tutorial("00-intro", package = "qsslearnr")
```


:::{.callout-important}

Please upload tutorials 00-intro and 01-measurement1 to [Canvas](https://canvas.brown.edu/courses/1098409/assignments) by Friday

:::

##  {background-image="https://upload.wikimedia.org/wikipedia/en/thumb/0/04/How_to_Get_Away_with_Murder_season_5_poster.jpg/220px-How_to_Get_Away_with_Murder_season_5_poster.jpg" background-size="contain"}

## You've committed a murder

```{r}
#| echo: false
#| label: murder
df %>%
  filter(!is.na(murder)) %>%
  mutate(
    Murder = to_factor(murder)
  )%>%
  ggplot(aes(Murder, fill=Murder))+
  geom_bar()+
  geom_text(stat='count', aes(label=after_stat(count)), hjust=-0.25)+
  coord_flip()+
  theme_bw()+
  labs(
    y="Count",
    x="",
    fill = "Tell",
    title = "Who would you tell"
  )

```

## Why {.smaller}

```{r}
#| echo = FALSE,
#| message = F,
#| warning = F
df %>%
  mutate(
    `Who would you tell?` = as_factor(murder),
    `Why?`= murder_why
  )%>%
  select(`Who would you tell?`, `Why?`)%>%
  DT::datatable(options = list("pageLength" = 5))

```

## Why do you ask?

It's cousin Nick's fault...

-   Funny icebreaker, but lots of assumptions...

    -   You're not a murderer

    -   You don't know someone who's committed a murder or been murdered

    -   You've got a mom and dad

## Why do you ask?

-   How might we make this question better?

    -   Use a screener question
        -   "Would you feel comfortable..."
    -   "Pipe" in responses from a prior question
        -   "Who are two people who raised you..."

. . .

[**What questions we ask and how we ask them matters**]{.blue}

## Hopes and Dreams, Fears and Worries

:::: columns
::: {.column width="48%"}
What are we [excited]{.blue} about?

-   Engaging with social science
-   Learning statistics and math
-   Learning to code
:::

::: {.column width="48%"}

[What are we [worried]{.blue} about?]{.fragment}

-   Engaging with social science
-   Learning statistics and math
-   Learning to code
:::
::::

# {{< fa lightbulb >}} Introduction to R, R Studio and Quarto {.inverse}

## Overview

-   R, R Studio and Quarto

-   Getting set up to work in R

-   Basic Programming in R

## R, R Studio and Quarto

-   [R]{.blue} is an open source [statistical programming language]{.blue} ([cheatsheet](https://rstudio.github.io/cheatsheets/base-r.pdf))

-   [R Studio]{.blue} is an [integrated development environment (IDE)]{.blue} that makes working in R [much]{.blue} easier ([cheatsheet](https://rstudio.github.io/cheatsheets/html/rstudio-ide.html?_gl=1*1i40yim*_ga*MTE1MDU5MzUyNC4xNzAzMTgzMDI2*_ga_2C0WZ1JHG0*MTcwNjU3MDk4Mi43LjAuMTcwNjU3MDk4Mi4wLjAuMA..))

-   [Quarto]{.blue} is a [publishing system]{.blue} that allows us to write and present code in [different formats]{.blue} ([cheatsheet](https://rstudio.github.io/cheatsheets/html/quarto.html?_gl=1*nz9m6y*_ga*MTE1MDU5MzUyNC4xNzAzMTgzMDI2*_ga_2C0WZ1JHG0*MTcwNjU3MDk4Mi43LjAuMTcwNjU3MDk4Mi4wLjAuMA..))

## General Tuesday Workflow

-   Go to <https://pols1600.paultesta.org>

-   Go to class content for current week

-   Open slides in browser

-   Open R Studio

-   Create .qmd file titled `wk01-notes.qmd` and save in course folder

-   Get set up to work

-   Take notes and follow along

## {{< fa code >}} Let's create a .qmd file {.inverse}

## Three components of a .qmd {.smaller}

::: nonincremental
-   Control output with YAML header

```         
  ---
  title: "Title here"
  author: "Your name"
  format:
    html:
      toc: true
  ---
```

-   Write code Blocks/Chunks

```{{r}}
#| echo: true
2+2
```

-   Describe code using Markdown

    -   See Help \> Markdown quick reference
:::

## The Basics of R

- R is an interpreter (\>)

  - Everything that [exists]{.blue} in R is an [object]{.blue}

  - Everything that [happens]{.blue} in R is the [result of a function]{.blue}

- Data come in different types, shapes, and sizes

- Packages extend what R can do

  - `install.packages("pacakge_name")` once to download a package
  - load packages [every session]{.blue} using `library("package_name")`

## R is an interpreter (\>)

Enter commands line-by-line in the console

-   The `>` means R is a ready for a command

-   The `+` means your last command isn't complete

    -   If you get stuck with a `+` use your escape key!

-   Send code from .qmd file to the console:

    -   `cntrl + Enter` (PC) \| `cmd + Return` (Mac) -\> run current line
    -   `cntrl + shift + Enter` (PC) \| `cmd + shift  + Return` (Mac) -\> run all code in current chunk

## R is a Calculator

```{r}
#| include = FALSE
math_table <- tibble::tribble(
  ~Operator, ~Description, ~Usage,
  "+", "addition", "x + y",
  "-", "subtraction", "x - y",
  "*", "multiplication", "x * y",
  "/", "division", "x / y",
  "^", "raised to the power of", "x ^ y",
  "abs", "absolute value", "abs(x)",
  "%/%", "integer division", "x %/% y",
  "%%", "remainder after division", "x %% y"
)
```

```{r}
#| echo = FALSE,
#| results = "asis"
knitr::kable(math_table, format = "html")
```

## R is logical

```{r}
#| include = FALSE
logic_table <- tibble::tribble(
  ~Operator, ~Description, ~Usage,
  "&", "and", "x & y",
  "|", "or", "x | y",
  "xor", "exactly x or y", "xor(x, y)",
  "!", "not", "!x"
)
```

```{r}
#| echo = FALSE,
#| results = "asis"
knitr::kable(logic_table, format = "html")
```

## R is logical

```{r}
#| echo: true
#| code-fold: false
x <- T; y <- F

x == T
x == T & y == T
x == T | y == T
!x
```

## R can make comparisons {.smaller}

```{r}
#| include = FALSE
comp_table <- tibble::tribble(
  ~Operator, ~Description, ~Usage,
  "<", "less than", "x < y",
  "<=", "less than or equal to", "x <= y",
  ">", "greater than", "x > y",
  ">=", "greater than or equal to", "x >= y",
  "==", "exactly equal to", "x == y",
  "!=", "not equal to", "x != y",
  "%in%", "group membership*", "x %in% y",
  "is.na", "is missing", "is.na(x)",
  "!is.na", "is not missing", "!is.na(x)"
)
```

```{r}
#| echo = FALSE,
#| results = "asis"
knitr::kable(comp_table, format = "html")
```

## Everything that exists in R is an object {.smaller}

::: nonincremental
-   The number 5 is an object in R

```{r}
#| echo: true
5
```

-   We can assign the object 5, the name x, using the assignment operator `<-`

```{r}
#| echo: true
x <- 5 # Read this as "x gets 5"
```

-   Now if we tell R to show us x, we'll get

```{r}
#| echo: true

x
print(x)
```
:::

## Data come in different types

```{r}
#| echo = FALSE,
#| out.width = 500
knitr::include_graphics("http://r4ds.had.co.nz/diagrams/data-structures-overview.png")
```

## Data come in different types {.smaller}

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| code-fold: false
# Create some data

# Numeric
x <- 2 # Double
y <- 6L # Integer

# Logical
only_two_types_of_people <- TRUE 

# Character
me <- "Paul"

# Factor
grades = factor(c("A","B","C"))

```
:::

::: {.column width="45%"}
```{r}
#| echo: true
#| code-fold: false

# What type are they?
class(x)
class(y)
class(only_two_types_of_people)
class(me)
class(grades)
```
:::
:::

::::{.fragment}

:::{.callout-tip}

One common portal of discovery, is that a function in R is expecting data of one type but (e.g. `numeric`) but actually gets data of different type (e.g. `character`)

The `class()` function is a useful `base R` for troubleshooting such errors.

:::
::::


## Data come in different "shapes" and "sizes"

![](https://miro.medium.com/v2/resize:fit:1400/format:webp/0*MgEQsDgZZ7fJcdhZ.png)

Source: [Gaurav Tiwari](https://medium.com/@tiwarigaurav2512/r-data-types-847fffb01d5b)

##  {.smaller}

| Name        | "Size"                                      | Type of Data                        | R code                     |
|------------------|------------------|------------------|------------------|
| scalar      | 1                                           | numeric, character, factor, logical | `x <- 5`                   |
| vector      | N elements: `length(x)`                     | all the same                        | `v <- c(1, 2, T, "false")` |
| matrix      | N rows by columns K: `dim(x)`               | all the same                        | `m <- matrix(y,2,2)`       |
| array       | N row by K column by J dimensions: `dim(x)` | all the same                        | `a <- array(m,c(2,2,3))`   |
| data frames | N row by K column matrix                    | can be different                    | `d <-data.frame(x=x, y=y)` |
| tibbles     | N row by K column matrix                    | can be different                    | `d <-tibble(x=x, y=y)`     |
| lists       | can vary                                    | can be different                    | `l <-list(x,y,m,a,d)`      |

## Everything that happens in R is the result of a function

-   You've already seen and used some R functions
    -   the `<-` is the assignement operator that assigns a value to a name
    -   `c()` is the combine function that combines elements together
    -   `install.packages()` installs packages
    -   `library()` loads packages you've installed so you can use functions and data that are part of that package

## Three sources of functions

Three sources of functions:

-   base R
    -   `<-; mean(x); library("package_name")`
-   packages
    -   `install.packages("packageName)"`
    -   `remotes::intall_github("user/repository")`
-   You
    -   `my_function <- function(x){x^2}`

## Functions are like recipes {.smaller}

They have:

::: columns
::: {.column width="40%"}
-   names

-   ingredients (inputs)

-   steps that tell you what to do with the ingredients (statements/code)

-   tasty results from applying those steps to given ingredients (outputs)
:::

::: {.column width="60%"}
![](https://www.rforecology.com/functions_image0_new.png) [(Source)](https://www.rforecology.com/post/how-to-create-your-own-function-in-r/)
:::
:::

## Can I kick it?

```{r}
#| echo: true
#| code-fold: false
can_x_kick_it <- function(x){
  # Determine if x can kick it
  # If x in A Tribe Called Quest
  if(x %in% c("Q-Tip","Phife Dawg",
              "Ali Shaheed Muhammad", 
              "Jarobi White")){
    return("Yes you can")
  }else{
    return("Before this, did you really know what live was?")
  }

}
can_x_kick_it("Q-Tip")
can_x_kick_it("Paul")
```

## Getting setup to work in R

Each time you start a project in R, you will want to:

-   Set your working directory in R Studio

-   Load (and if needed, install) the R packages you will use

-   Set any "global" options you want

-   Load the data you'll be using

## Set your working directory

![](https://statisticsglobe.com/wp-content/uploads/2020/03/figure-2-set-working-directory-to-source-file-location-manually.png)

## Load (and if needed, install) the R packages you will use

::: nonincremental
-   Install packages [once]{.blue}[^1] with `install.packages("package_name")`

-   Load packages [every session]{.blue} with `library("package_name")`
:::

[^1]: Occasionally, you'll have to update packages to newer versions and will likely need to reinstall when you upgrade R

## {{<fa code >}} Install packages for the lab {.inverse}

## Install packages for the lab {.smaller}

Let's install the `tidyverse` and `COVID19`.

::: nonincremental
-   Create a new code chunk
-   Label it `libraries`
-   Copy and paste the following into your console
:::

```{r}
#| eval: false
#| echo: true
install.packages("tidyverse")
install.packages("COVID19")
```

::: nonincremental
-   Once you've installed these packages comment out the code (Why?)
:::

```{r}
#| eval: false
#| echo: true
# install.packages("tidyverse")
# install.packages("COVID19")
```

::: callout-tip
## Keyboard Shortcuts to toggle `#` comments

macOS: `CMD` + `SHIFT` + `C`

PC: `CTRL` + `SHIFT` + `C`
:::

## Loading the `tidyverse` and `COVID19` packages

-   Type the following into your code chunk:

```{r}
#| echo: true
library("tidyverse")
library(COVID19)
```


## Load the data you'll be using {.smaller}

There are three ways to load data.

- Load a [pre-existing]{.blue} dataset
  - `data("dataset")` will load the dataset named "dataset"
    - `data()` will list all datasets

- Load a .Rdata/.rda file using `load("dataset.rda")`

- Read data of a different format (.csv, .dta, .spss) into R using specific functions from packages like `haven` and `readr`

:::{.fragment}

```{r}
#| eval: false

# EXAMPLE CODE (Won't actually run)
# Read a .csv file saved locally on my Desktop
df_csv <- readr::read_csv("~/Desktop/data.csv")
# Read a .dta file saved on the web
df_dta <- haven::read_dta("https://paultesta.org/data.dta")
```

:::
# {{< fa lightbulb >}} Working with Data in R {.inverse}

## Overview: Working with Data in R

-   Loading data into R

-   Looking at your data

-   Cleaning and transforming your data

## Loading data into R {.smaller}

There are three ways to load data.

-   Load a pre-existing dataset
    -   `data("dataset")` will load the dataset named "dataset"
    -   `data()` will list all datasets
    -   Useful for tutorials, working through examples/help
-   Load a .Rdata/.rda file using `load("dataset.rda")`
-   Read data of a different format (.csv, .dta, .spss) into R using specific functions
    -   We will use functions from the `haven` and `readr` packages to read data from the web and stored locally on your computer

## {{<fa code >}} Loading state-level Covid data {.inverse}

## Loading state-level Covid data

The code below downloads two years of daily state-level Covid data:

```{r}
#| eval: false
covid <- COVID19::covid19(
  country = "US",
  start = "2020-01-01",
  end = "2022-12-31",
  level = 2,
  verbose = F
    
)
```

Please run the following[^3]

[^3]: 30 people trying to download this data live sometimes causes errors with the server

```{r}

load(url("https://pols1600.paultesta.org/files/data/covid.rda"))



```

## Loading state-level Covid data {.smaller}

::: nonincremental
-   `country = US` tells the function we want data for the US
-   `start = "2020-01-01"` sets the start date for the data
-   `start = "2020-01-01"` sets the end date for the data
-   `level = 2` tells the function we want state-level data
-   `verbose = F` tells the function not to print other stuff
:::

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "|2|3|4-5|6|7"

covid <- COVID19::covid19(
  country = "US",
  start = "2020-01-01",
  end = "2022-12-31",
  level = 2,
  verbose = F
    
)

```

## Looking at your data {.smaller}

The first time you load a dataset into R, you should try to get a [high-level overview (HLO)]{.blue} of the data

:::{.callout-tip}

This is an iterative, dynamic process. Something you do "live" but won't necessarily save in your final code you submit. Overtime you'll develop ways of quickly looking at data and quickly answering questions like. For example, I might want to know, how many unique val

:::


```{r}

table(covid$school_closing)

```


## HLOs allow you to {.smaller}

-   Describe the [structure]{.blue} of your data:
    -   How many observations (rows)
    -   How many variables (columns)
-   Describe the [unit of observation]{.blue}
    -   In plain language, what *is* a row in your data
-   Identify the [class and type]{.blue} of variables (columns)
    -   Numeric, character, logical
    -   Is there missing data (`NA`s)
-   Figure out what [transformations, cleaning, and recoding]{.blue} you need to do


## Functions to help you get a high level overview {.smaller}

-   `dim(data)` gives you the dimensions (# of rows and columns)
-   `View(data)` opens data in a separate pane
-   `print(data); data` will display a truncated view of data in your console
-   `glimpse(data)` will show a transposed (switch columns and rows) version of data with information on variable type
-   `head(data)` shows you the first 5 rows
-   `tail(data)` shows you the last 5 rows
-   `data$variable` extracts `variable` from `data`
-   `table(data$variable)` creates a frequency table
    -   Good for categorical data
-   `summary(data$variable)` summary statistics
    -   Good for numeric data



# {{< fa lightbulb >}} Data Wrangling in the Tidyverse {.inverse}

## The Tidyverse

::: columns
::: {.column width="60"}
> The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.

For more check out [*R for Data Science*](https://r4ds.had.co.nz/)
:::

::: {.column width="30"}
![](https://www.tidyverse.org/images/hex-tidyverse.png)
:::
:::

## Tidy Data

Tidy data is a standard way of mapping the meaning of a dataset to its structure.

A dataset is messy or tidy depending on how rows, columns and tables are matched up with observations, variables and types. In tidy data:

-   Every column is a variable.

-   Every row is an observation.

-   Every cell is a single value.

[More](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)

## `dplyr` functions for data wrangling {.smaller}

Today and this week will begin learning some tools for selecting and transforming data:

-   `select()` to select [columns]{.blue} from a dataframe
-   `filter()` to select [rows]{.blue} from a dataframe when some [statement]{.blue} is `TRUE`
-   `mutate()` to create [new colums]{.blue}
    -   `case_when()` to [recode values]{.blue} when some [statement]{.blue} is `TRUE`
-   `summarise()` to transform [many values]{.blue} into [one value]{.blue}
-   `group_by()` to create a [grouped]{.blue} table so that other functions are applied separately to each group and then combined

## The `%>%` ("pipe" operator) {.smaller}

The `%>%` lets us chain functions together so we can read left to right

```{r}
#| eval = F
slice(filter(covid, administrative_area_level_2 == "Rhode Island"), 1)
```

Becomes

```{r}
#| eval = F
covid %>% 
  filter(administrative_area_level_2 == "Rhode Island") %>% 
  slice(1)
```

::: callout-tip
## Keyboard Shortcuts for `%>%`

macOS: `CMD` + `SHIFT` + `M`

PC: `CTRL` + `SHIFT` + `M`
:::

# {{< fa lightbulb >}} Describing Data in R {.inverse}

## Descriptive Statistics {.smaller}

When social scientists talk about descriptive inference, we're trying to summarize our data and make claims about what's *typical* of our data

-   What's a typical value
    -   [Measures of central tendency]{.blue}
    -   mean, median, mode
-   How do our data vary around typical values
    -   [Measures of dispersion]{.blue}
    -   variance, standard deviation, range, percentile ranges
-   How does variation in one variable relate to variation in another
    -   [Measures of association]{.blue}
    -   covariance, correlation

## Using R to Summarize Data {.smaller}

Here are some common ways of summarizing data and how to calculate them with `R`

```{r}
#| echo = F
summary_table <- tibble::tribble(
  ~Description, ~Usage,
  "sum", "sum(x)",
  "minimum", "min(x)",
  "maximum", "max(x)",
  "range", "range(x)",
  "mean", "mean(x)",
  "median", "median(x)",
  "percentile", "quantile(x)",
   "variance", "var(x)",
  "standard deviation", "sd(x)",
  "rank", "rank(x)"
)
```

```{r}
#| echo = FALSE,
#| results = "asis"
knitr::kable(summary_table, format = "html")
```

All of these functions have an argument called `na.rm=F`. If your data have missing values, you'll need to set `na.rm=F` (e.g. `mean(x, na.rm=T)`)

# {{< fa code>}} Exploring Covid-19 Data for Lab {.inverse}

## Exploring Covid-19 Data for Lab

Let's spend the rest of class, exploring what seems like a simple question

> On average, did states that adopted mask mandates have lower rates of new cases?

## Tasks

1.  Get a high level overview of our data

2.  Subset the data to just U.S. States

3.  Recode our data to get a measure of new Covid cases and what face mask policy policy was in place

4.  Summarize the average number of new cases by face mask policy.

## 1. Get a high level overview of our data

::: columns
::: {.column width="30%"}
::: nonincremental
1.  Create a new chunk
2.  Label it `#| label:"HLO"`
3.  Run the following code
4.  Comment code with `#`
:::
:::

::: {.column width="70%"}
```{r}
#| eval = F

dim(covid)
head(covid)
glimpse(covid)
table(covid$administrative_area_level_2)
length(unique(covid$administrative_area_level_2))
covid$confirmed[1:10]
covid %>%
  select(administrative_area_level_2, date, confirmed) %>%
  slice(10:20)
summary(covid$confirmed)
table(covid$facial_coverings)

```
:::
:::

## Answer the following

::: nonincremental
-   How many observations are there (rows)
-   How many variables (columns)
-   What's the unit of analysis?
    -   In words, how would you describe what a row in your data set corresponds to?
-   Are there any missing values for `confirmed`
-   What range of values can `facial_coverings` take?[^4]
:::

[^4]: See: https://covid19datahub.io/articles/docs.html

## Subsetting our data to only U.S. States

[Goal:]{.blue} Subset our Covid data to include only the 50 states + DC

[Steps:]{.blue}

1.  Create a vector of the territories we **don't** want

2.  Use the `filter()` command to "filter" out these territories

## 1. Create a vector of the territories we **don't** want

```{r}
territories <- c(
  "American Samoa",
  "Guam",
  "Northern Mariana Islands",
  "Puerto Rico",
  "Virgin Islands"
  )
```

## 2. Use the `filter()` command to "filter" out these territories

```{r}
covid_us <- covid %>%
  filter(!administrative_area_level_2 %in% territories )

dim(covid)
dim(covid_us)
```

## Creating new variables for analysis

-   [Goal:]{.blue} We need new variables that describe:

    -   the number of new Covid-19 cases on a given date

    -   the face mask policy in place

-   [Steps:]{.blue}

    -   Use `mutate()`, `group_by()` and `lag()` to calculate `new_cases` from total `confirmed` cases

    -   Use `mutate()`, `case_when()` and `abs()` to turn numeric `facial_coverings` into categorical factor variable

## Calculate new Covid-19 cases

Please run and comment the following code:

```{r}

dim(covid_us)
covid_us %>%
  mutate(
    state = administrative_area_level_2,
  ) %>%
  dplyr::group_by(state) %>%
  mutate(
    new_cases = confirmed - lag(confirmed),
    new_cases_pc = new_cases/population *100000
    ) -> covid_us
dim(covid_us)

```

## Create Face Mask Policy variable

```{r}
covid_us %>%
  mutate(
    face_masks = case_when(
      facial_coverings == 0 ~ "No policy",
      abs(facial_coverings) == 1 ~ "Recommended",
      abs(facial_coverings) == 2 ~ "Some requirements",
      abs(facial_coverings) == 3 ~ "Required shared places",
      abs(facial_coverings) == 4 ~ "Required all times",
      
    ) 
  ) -> covid_us

levels(factor(covid_us$face_masks))
```

## Make `face_masks` a factor to reflect order of policies

```{r}
levels(factor(covid_us$face_masks))

covid_us %>%
  mutate(
    face_masks = factor(
      face_masks,
      levels = c(
        "No policy", 
        "Recommended", 
        "Some requirements",
        "Required shared places",
        "Required all times"
        )
    )
  ) -> covid_us

levels(covid_us$face_masks)
```

## Calculate the Average Number of Covid-19 cases by Face Mask Policy

-   [Goal:]{.blue} On average, did states that adopted mask mandates have lower rates of new cases?

-   [Steps:]{.blue} use `filter()`, `group_by()` and `summarise()` and `mean()` to calculate the average number of cases for each level of the `face_masks` policy variable

## Face Masks and New Covid-19 Cases (per 100k)

```{r}
covid_us %>%
  filter(!is.na(face_masks))%>%
  group_by(face_masks)%>%
  summarize(
    `Average No. of New Cases` = round(mean(new_cases_pc, na.rm=T),2)
  )%>%
  rename(
    "Face Mask Policy" = face_masks
  ) -> face_mask_summary

```

## Face Masks and New Covid-19 Cases (per 100k) {.smaller}

::: columns
::: {.column width="40%"}
::: nonincremental
-   What should we conclude?

-   What's wrong with this simple comparison?

-   What's a better comparison? (Thursday)
:::
:::

::: {.column width="60%"}
```{r}
#| echo = FALSE,
#| results = "asis"
knitr::kable(face_mask_summary, format = "html")
```
:::
:::

## Commented Code

```{r}
#| eval: false

# ---- Libraries ----
## Uncomment to install
# install.packages("tidyverse")
# install.packages("COVID19")

library("tidyverse")
library("COVID19")

# ---- Load data ----
load(url("https://pols1600.paultesta.org/files/data/covid.rda"))

# ---- Subset to US states and DC ----

territories <- c(
  "American Samoa",
  "Guam",
  "Northern Mariana Islands",
  "Puerto Rico",
  "Virgin Islands"
  )


covid_us <- covid %>%
  filter(!administrative_area_level_2 %in% territories )

## Check subsetting
dim(covid)[1] > dim(covid_us)[1]

# ---- Recode covid_us ----

covid_us %>%
  mutate(
    state = administrative_area_level_2,
  ) %>%
  dplyr::group_by(state) %>%
  mutate(
    new_cases = confirmed - lag(confirmed),
    new_cases_pc = new_cases/population *100000
    ) %>%
  mutate(
    face_masks = case_when(
      facial_coverings == 0 ~ "No policy",
      abs(facial_coverings) == 1 ~ "Recommended",
      abs(facial_coverings) == 2 ~ "Some requirements",
      abs(facial_coverings) == 3 ~ "Required shared places",
      abs(facial_coverings) == 4 ~ "Required all times"
      ) 
    ) %>%
  mutate(
    face_masks = factor(
      face_masks,
      levels = c(
        "No policy", 
        "Recommended", 
        "Some requirements",
        "Required shared places",
        "Required all times"
        )
      )
    )-> covid_us


# ---- Calculate new cases per capita by facemask policy
covid_us %>%
  filter(!is.na(face_masks))%>%
  group_by(face_masks)%>%
  summarize(
    `Average No. of New Cases` = round(mean(new_cases_pc, na.rm=T),2)
  )%>%
  rename(
    "Face Mask Policy" = face_masks
  ) -> face_mask_summary

face_mask_summary

```

# {{< fa home >}} Summary {.inverse}

## Summary {.smaller}

After today, you should have a better sense of

-   How to write R code using Quarto and R Markdown

-   How to install packages and load libraries

-   Some of different types and shapes of data

-   How to get a high level overview of your data

-   How to transform, recode, and summarise data using `dplyr` and the `tidyverse`

-   How describe typical values and variation in data

-   How to explore substantive questions using these these typical values

## Congrats!

-   We covered A LOT

-   It's [OK]{.blue} to feel overwhelmed

    -   But please don't suffer in silence

-   Don't worry if everything didn't make sense.

    -   Eventually it will, but this takes time and practice
    -   Testa's 50-50 rule
    -   FAAFO
